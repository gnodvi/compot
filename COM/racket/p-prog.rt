
;;; Muffle compiler-notes globally
;#+SBCL (declaim (sb-ext:muffle-conditions warning style-warning sb-ext:compiler-note))

;;;=============================================================================

;;;=============================================================================

;; доля популяции к которой в каждом поколении будет приеменяться
;; кроссовер в какой-нибудь (any - любой?) точке дерева (including terminals - 2часть)
(define *crossover-at-any-point-fraction*             'unbound-07)

;; доля популяции к которой в каждом поколении будет приеменяться
;; кроссовер в функциональной (внутренней) точке дерева
(define *crossover-at-function-point-fraction*        'unbound-08)

;; максимальная глубина для особей начального случайного поколения
(define *max-depth-for-new-individuals*               'unbound-09)

;; максимальная глубина новых особей созданных кроссовером
(define *max-depth-for-individuals-after-crossover*   'unbound-10)

;; максимальная глубина новых субдеревьев созаваемых мутацией
(define *max-depth-for-new-subtrees-in-mutants*       'unbound-11)

;;---------------------------------------------------------

(define *eval_prog*               'unbound-41)

(define *minimum-depth-of-trees*  'unbound-42)
(define *full-cycle-p*            'unbound-43)

;; число фитнес-блоков
(define *number-of-fitness-cases* 'unbound-44)

(define *is_print*                'unbound-45)

;;-------------------------------------------------------------------------------

(define *sms_list*    'unbound-12)
(define *l*           'unbound-13)
(define *l-1*         'unbound-14)

;;(defvar *is_ADF_depth_minus_1*  :unbound)
;;(defvar *ADF_sort_population* :unbound)

(define *is_ADF_as_OLD*  'unbound-15) ; т.е. получается что это уже #T ??!!
;(defvar *is_ADF_as_OLD*  :unbound) ; было в лиспе

;;;;=============================================================================
;; (load "a_tree.cl")
;;
;; Eсли понадобиться работа с дeрeвьями (напримeр в пeрeборном Прологe)
;; то вынeсти эту часть в отдeльный файл обратно.
;;
;;;=============================================================================
;;;

(define-syntax-rule (copy-tree flist) (list-copy flist))

;-------------------------------------------------------------------------------
; создать список аргументов для узла в дереве;
;-------------------------------------------------------------------------------
(define (create-arguments-for-function 
            number-of-arguments ; сколько еще остается создать аргументов
            function-set argument-map terminal-set 
            allowable-depth
            full-p)

(let (
   (_list  (list function-set argument-map terminal-set)) 
)

  (if (= number-of-arguments 0)
      nil
      (cons (create-individual-subtree   
                    _list ; function-set argument-map terminal-set
                    allowable-depth nil full-p)
            (create-arguments-for-function 
                    (- number-of-arguments 1) 
                    function-set argument-map terminal-set
                    allowable-depth full-p))
  )

))
;-------------------------------------------------------------------------------
(define (cons_func_args 
       choice 
       function-set argument-map terminal-set 
       allowable-depth full-p) 

(let (
  (function            (nth choice function-set))
  (number-of-arguments (nth choice argument-map))
  )

  (cons function
        (create-arguments-for-function 
                number-of-arguments 
                function-set argument-map terminal-set
                (- allowable-depth 1) full-p))
))
;-------------------------------------------------------------------------------
;   Создаем программу рекурсивно, используя заданные функции и терминалы.  
;-------------------------------------------------------------------------------
(define (create-individual-subtree 
  _list ; fset amap tset
  allowable-depth ; допустимая глубина создаваемого субдерева,
                  ; если 0, то будут выбраны только терминалы;

  top-node-p      ; истина, только когда вызов был от верхнего узла в дереве;
                  ; это позволяет быть уверенным, что мы всегда кладем функцию на верх
                  ; дерева;
  full-p          ; показывает максимально ли эта особь лохмата (пушиста);
  )
  ;; ------------------------------
  (let (

  (fset (first  _list))
  (amap (second _list))
  (tset (third  _list))
  )   

  ;(printf "create-individual-subtree .. 1 ~n" )
  ;(printf "allowable-depth = ~s ~n"  allowable-depth)

   (cond 

   ;; ----------------------------
   ((<= allowable-depth 0) ; уже достигли "maxdepth", поэтому просто упакуем terminal
    (choose-from-terminal-set tset))
   ;; ----------------------------

   ; (printf "create-individual-subtree .. 2 ~n" ) - здесь ОШИБКА!

   ;; ----------------------------
   ((or full-p top-node-p) ; полное или дерево верхний узел, поэтому выбираем только функцию
    ;(let* (
          ;(l (length fset))
          ;(choice  (random-integer l))
          ;choice
    ;      )

      ;(setf choice (random-integer l)) ; почeму всeгда пeрвыe 2 и 3 из чeтырeх???
      ;(if *debug_print* (format t "l= ~A   choice= ~A ~%" l choice))
      (cons_func_args (random-integer (length fset)) ;choice 
                      fset amap tset 
                      allowable-depth full-p)
    ;)
    )
   ;; ----------------------------
   
   ;; ----------------------------
   (:otherwise  ; выбираем из сумки функций и терминалов
    (let (
         (choice (random-integer        ; получаeтся - дeлаeм выбор пропорционально
                  (+ (length tset)      ; длинe списков ?? а надо бы контролировать !!
                     (length fset))))
         )

      (if (< choice (length fset))
          ;; мы выбрали функцию, поэтому вытаскиваем ее и начинаем
          ;; создание дерева вниз отсюда
          (cons_func_args choice 
                          fset amap tset 
                          allowable-depth full-p)

          ;; мы выбрали атом, поэтому вытаскиваем его
          (choose-from-terminal-set tset))
      ))
   ;; ----------------------------
   )

))
;-------------------------------------------------------------------------------
;   Create a new random program (by method_of_generation)
;-------------------------------------------------------------------------------
(define (create-program-branch 
       _list
       method_of_generation
       minimum-depth-of-trees  maximum-depth-of-trees
       ind_index  full-cycle-p)


  ;;------------------------------------------------------------------
  ;(printf "create-program-branch ... 1 ~n")
  ;;------------------------------------------------------------------

  (create-individual-subtree
    _list

;    (ecase method_of_generation ; допустимая глубина создаваемого субдерева
;      ((:full :grow)         maximum-depth-of-trees)
;      (:ramped-half-and-half (+ minimum-depth-of-trees (mod ind_index ;??
;                                                            (- maximum-depth-of-trees
;                                                               minimum-depth-of-trees)))))

    ;(cond ; допустимая глубина создаваемого субдерева
     ;; щас... а что мы тут сравниваем ?????

    (case method_of_generation ; допустимая глубина создаваемого субдерева
      [(full grow)            maximum-depth-of-trees]

      [(ramped-half-and-half) 
      (+ minimum-depth-of-trees (modulo ind_index ;??
                                        (- maximum-depth-of-trees
                                           minimum-depth-of-trees)))]
      [else  (printf "!!!!!!!!!!!!!!!! not CASE !!!!!!!!!!!! ~n")]
      )

    #t ; истина, только когда вызов был от верхнего узла в дереве;

;    (ecase method_of_generation ; показывает максимально ли эта особь лохмата (пушиста);
;      (:full                            t)
;      (:grow                          nil)
;      (:ramped-half-and-half full-cycle-p)) ; мeняeм циклом?

    (case  method_of_generation ; показывает максимально ли эта особь лохмата (пушиста);
      [(full)                            #t]
      [(grow)                            #f]
      [(ramped-half-and-half)  full-cycle-p] ; мeняeм циклом?
      [else                 (printf "!!!!!!!!!!!!!!!! not CASE !!!!!!!!!!!! ~n")]
      ) 
  )

)
;;;;=============================================================================
;;
;;-------------------------------------------------------------------------------
;(defun conf_0 (argus)

;(let (
;  (maxd (parse-integer (nth 0 argus)))

;  (_list  (list  '(+ - * %)  '(2 2 2 2)  '(:floating-point-random-constant)))
;  branch
;  )

;  ;(setf *debug_print* t)  
;  (seed_set_random)

;  (setf branch (create-individual-subtree   
;       _list 
;       maxd ; допустимая глубина субдерева, если 0, то будут выбраны только терминалы 
;       t    ; истина, только когда вызов был от верхнего узла в дереве;
;            ; это позволяет быть уверенным, что мы всегда кладем функцию на верх дерева
;       t    ; показывает максимально ли эта особь "лохмата" (от корнeй до листов)
;       )
;   )

;  (format t "~%")
;  (format t "~S ~%" branch)

;  (format t "~%")
;))
;;;;=============================================================================
;;
;;
;;-------------------------------------------------------------------------------
;;   Given a tree or subtree, a pointer to that tree/subtree and
;;   an index return the component subtree that is 
;;   numbered by Index. 
 
;;   We number left to right, depth first.
;;-------------------------------------------------------------------------------
;;  мне кажется, что слишком запутанная схема, надо бы упростить..
;;-------------------------------------------------------------------------------
;(defun get-subtree (tree pointer-to-tree index)

;  (if (= index 0)
;    ;; если уже дошли в итерациях до нуля, то вернуть перврначальные?
;    ;; такое бывает в случае: .. ??
;    (values pointer-to-tree (copy-tree tree) index)

;    ;; а иначе смотрим дальше:
;    (if (consp tree)

;        ;; если это дерево является "парой", то идем дальше циклом:
;        ;; а зачем тут цикл, если у нас рекурсия?
;        ;; --------------------------------------
;        (do* (
;              (tail      (rest tree)  (rest tail))  ; (var1 init1 step1)
;              (argument (first tail) (first tail))  ; (var2 init2 step2)
;              )
;              ((not tail) (values nil nil index))   ; (end-test . result)

;            (multiple-value-bind 
;                (new-pointer new-tree new-index)
;                (get-subtree  argument tail (- index 1))

;            (if (= new-index 0) ; добрались до нужного "номера"
;                (return (values new-pointer new-tree new-index)) ; выйти из блока DO
;                (setf index new-index)) ; переустановились для дальнейшего поиска
;          )
;        )
;        ;; а иначе возвращаем "заглушки" и ненулевой индекс
;        ;; такое бывает в случае: .. ??
;        ;; --------------------------------------
;        (values nil nil index))
;  )
;)
;;===============================================================================
;; В 9-х, ядро содержит группу из 5-ти функций для выполнения скрещиваний
;; в любой точке. 

;; Перед скрещиванием, с помощью функции COPY-TREE делается копия каждого 
;; родителя. 
;; Затем, деструктивно модифицируется указатель "crossover fragment (subtree)" 
;; копии каждого родителя в их соответствующих точках скрещивания, так чтобы он 
;; указывал на "crossover fragment (subtree)" копии другого родителя. 

;; После деструктивного изменения указателей в копиях,
;; the resulting altered copies become the offspring. The original parents 
;; remain in the population and can often repeatedly participate in other 
;; operations during the current generation. Таким образом, the selection of parents 
;; is done with replacement (i.e., reselection) allowed.
;;-------------------------------------------------------------------------------

;; copy-list list

;; This returns a list that is equal to list, but not eq. Only the top level of 
;; list structure is copied; that is, copy-list copies in the cdr direction but 
;; not in the car direction. If the list is ``dotted,'' that is, (cdr (last list)) 
;; is a non-nil atom, this will be true of the returned list also. 


;; copy-tree object

;; copy-tree is for copying trees of conses. The argument object may be any 
;; Lisp object. If it is not a cons, it is returned; otherwise the result is 
;; a new cons of the results of calling copy-tree on the car and cdr of the 
;; argument. In other words, all conses in the tree are copied recursively, 
;; stopping only when non-conses are encountered. Circularities and the sharing 
;; of substructure are not preserved. 

;;-------------------------------------------------------------------------------
;(defun max-depth-of-tree (tree)

;  (if (consp tree)
;      (+ 1 (if (rest tree)
;               (apply #'max
;                      (mapcar #'max-depth-of-tree (rest tree)))
;             0))
;    1)
;)
;;-------------------------------------------------------------------------------
;; Взяв старых и новых males and females из операции скрещивания,
;; проверим, не вышли ли мы за максимально разрешенную глубину.
;; Если новые особи превысили maxdepth, то используются старые особи.

;; в 1-й части (koza-1.lisp) вместо >= в двух местах стояло строгое неравенство >
;; однако замена ни на что вроде не повлияла..
;;-------------------------------------------------------------------------------
;(defun validate-crossover (male new-male  female new-female)

;(let ( ; локальные переменные
;  (  male-depth  (max-depth-of-tree (first new-male)))
;  (female-depth  (max-depth-of-tree (first new-female)))
;  )

;  (values

;   (if (or (= 1 male-depth)
;           (>= male-depth     ;; >= counts 1 depth for root above branches
;               *max-depth-for-individuals-after-crossover*))
;       male
;      (first new-male))

;   (if (or ( = female-depth 1)
;           (>= female-depth *max-depth-for-individuals-after-crossover*))
;       female
;       (first new-female))

;  ) ; возвращаем двух разнополых особей
  
;))
;;-------------------------------------------------------------------------------
;------------------------------------------------------------------------------
; LISP: [Function]
;copy-tree object

;copy-tree is for copying trees of conses. The argument object may be any Lisp object. 
;If it is not a cons, it is returned; otherwise the result is a new cons of the 
;results of calling copy-tree on the car and cdr of the argument. In other words, 
;all conses in the tree are copied recursively, stopping only when non-conses are 
;encountered. Circularities and the sharing of substructure are not preserved. 

; SCHEME:
; list-copy flist -> flist
;    Copies the spine of the argument. (хребет?)

;------------------------------------------------------------------------------
; http://icem.folkwang-hochschule.de/~finnendahl/cm_kurse/doc/schintro/schintro_46.html
;------------------------------------------------------------------------------

;To copy the spine of a proper list, we can use this description of the answer we want:
;A copy of a list is

;    * the empty list if the original list is empty, or
;    * (if the list is nonempty) a pair whose car value is the same as the car of 
;the original list, and whose cdr value is a copy of the rest of the original list. 
;Here's the code:

;(define (list-copy lis)
;   (cond ((null? lis)
;          '())
;         (else
;          (cons (car lis)
;                (list-copy (cdr lis))))
;;-------------------------------------------------------------------------------
;; выполнить скрещивание программных веток в любой точке поддеревьев
;; 
;;-------------------------------------------------------------------------------
(define (crossover_at_points   male female 
                               count_points ; 'count-function-points  'count-crossover-points 
                               get_subtree  ; 'get-function-subtree   'get-subtree
                               )

(let* (
  (cp_male    (funcall  count_points   male))
  (cp_female  (funcall  count_points female))

  ;; выберем точки в соответствующих деревьях, на которых выполняется
  ;; скрещивание; (это просто числа!)
  (  male-point  (random-integer  cp_male  ))
  (female-point  (random-integer  cp_female))

  ;; сначала, копируем деревья, потому что мы деструктивно модифицируем новые
  ;; особи, выполняя скрещивание; 
  ;; повторный отбор допускается в исходной популяции;
  ;; копирование не будет причиной изменения особей в старой популяции;

  (  new-male (list (copy-tree   male)))  
  (new-female (list (copy-tree female))) ;; это нужно для деструкт. изменен.?
              ;; может это лишнее? ведь объект и так копируется полностью.. ?
  ;; скорее всего - заключаем в оболочку конс-пары, чтобы использовать второй NIL,
  ;; как ограничитель в итерационном поиске..?
  )

  (printf "------------------------------------------------------------- \n")
  (printf "  male= ~s  \n" male)
  (printf "female= ~s  \n" female)
  ;(printf "count_points= ~s  \n" count_points)
  ;(printf "get_subtree = ~s  \n" get_subtree )
  (printf "\n")
  (printf "cp_male=    ~s  cp_female= ~s \n" cp_male  cp_female)
  (printf "male_point= ~s  female_point= ~s \n" male-point  female-point)
  (printf "\n")


  ;; Get the pointers to the subtrees indexed by male-point
  ;; and female-point

  (let-values ((
    (male-subtree-pointer   male-fragment index) ; index не нужен
    (funcall     
     get_subtree (first new-male) new-male male-point)
    ))

  (let-values ((
      (female-subtree-pointer female-fragment index)
      (funcall  get_subtree (first new-female) new-female female-point)
      ))


    (printf "\n")
    (printf "  male-subtree-pointer= ~s     male-fragment= ~s  index= ~s \n" 
            male-subtree-pointer male-fragment index)

    (printf "female-subtree-pointer= ~s   female-fragment= ~s  index= ~s \n" 
            female-subtree-pointer female-fragment index)
    (printf "\n")

;    ;; модифицируем новые особи, "сталкивая" скопированные поддеревья
;    ;; старых особей;
;    ;; SCHEME - RACKET: мы же не можем модифицировать список!!!!!!!
;    ;; значит нужно сделать модифицированный !!!!!!!!!!!!!!!!!!!!!!

;    (setf (first   male-subtree-pointer) female-fragment)
;    (setf (first female-subtree-pointer)   male-fragment)

;    (set-mcar! male-subtree-pointer female-fragment) ; попробовать так ??

    ))

  ;; убедимся, что новые особи не слишком большие (по глубине),
  ;; если не так, то вернутся старые особи..
  (validate-crossover  male new-male  female new-female)
))
;;-------------------------------------------------------------------------------
;(defun crossover-at-any-points-within-branch (male female)


;  (crossover_at_points  male female 
;                        'count-crossover-points 'get-subtree)

;)
;;-------------------------------------------------------------------------------
;;   Performs crossover on the two programs (branches) at a function
;;   (internal) point in the trees.
;;-------------------------------------------------------------------------------
(define (crossover-at-function-points-within-branch  male female)


  (crossover_at_points  male female 
                        'count-function-points 'get-function-subtree)

)
;;;;=============================================================================
;;-------------------------------------------------------------------------------
(define (set_sms_l  l)

  (set! *l*   l)
  (set! *l-1* (- *l* 1))

)
;;-------------------------------------------------------------------------------
(define (set_sms_list _list)

  (set! *sms_list* _list)

  ;(set_sms_l (list-length _list))
  (set_sms_l (list-length _list))

)
;;-------------------------------------------------------------------------------
(define (gp_crossover  individual_1 individual_2 fraction)

  (errprintf "(gp_crossover ... ~n")

  (funcall
   (if (< fraction *crossover-at-function-point-fraction*)
       'crossover-at-function-points
       'crossover-at-any-points)
   individual_1 individual_2)

)
;-------------------------------------------------------------------------------
(define (gp_init_0)

  (setf *minimum-depth-of-trees* 1)
  (setf *full-cycle-p*           nil)

)
;-------------------------------------------------------------------------------
; распечатать параметры, установленные для этого запуска
;-------------------------------------------------------------------------------
(define (gp_print_parameters)

  (printf "Max depth of new individuals:             ~s ~n" *max-depth-for-new-individuals*)
  (printf "Max depth of new subtrees for mutants:    ~s ~n" *max-depth-for-new-subtrees-in-mutants*)
;  (format t "Max depth of individuals after crossover: ~D ~%" *max-depth-for-individuals-after-crossover*)
;  (format t "Crossover at any point fraction:          ~D ~%" *crossover-at-any-point-fraction*)
;  (format t "Crossover at function points fraction:    ~D ~%" *crossover-at-function-point-fraction*)

;  (format t "Number of fitness cases:                  ~D ~%" *number-of-fitness-cases*)

  (format_line75)
)
;;-------------------------------------------------------------------------------
;;
;; функция "reduce" комбинирует все элементы последовательности используя 
;; бинарный оператор;
;;
;; mapcar operates on successive elements of the lists. First the function is 
;; applied to the car of each list, then to the cadr of each list, and so on.;

;;-------------------------------------------------------------------------------
;; хочется сделать обобщенную функцию ;
;;-------------------------------------------------------------------------------
(define (count_cross_points  program ret)

;  (if (consp program)
;      (+ 1 (reduce #'+ (mapcar #'count_cross_points 
;                               (rest program) 
;                               (make-list (list-length program) :initial-element ret)
;                               ) 
;                   ))
;      ret) 

  ;(printf "count_cross_points ..  BEGIN .. \n")
  ;(printf "count_cross_points ..  program = ~s  \n" program)
  ;(printf "ret     = ~s  \n" ret)

; LISP:
; The reduce function combines all the elements of a sequence using a binary 
; operation; for example, using + one can add up all the elements. 

; RACKET:
; (require (lib "list.ss" "srfi" "1"))

; mapcar operates on successive elements of the lists. First the function is 
; applied to the car of each list, then to the cadr of each list, and so on.

; (Ideally all the lists are the same length; if not, the iteration terminates 
; when the shortest list runs out, and excess elements in other lists are ignored.) 
; The value returned by mapcar is a list of the results of the successive calls 
; to the function. For example: 

; LISP: A good example is a function which in Scheme is called map and in Common Lisp 
; is called mapcar. Given a function and one or more lists, mapcar applies the 
; function successively to the lists' elements in order, collecting the 
; results in a new list:


;map: all lists must have same size; arguments were: 
;#<procedure:count_cross_points> 
;'((IF-FOOD-AHEAD (MOVE) (LEFT)) (PROGN (MOVE) (RIGHT) (MOVE))) 
;'(0 0 0)

; Applies proc to the elements of the lsts from the first elements to the last. 
; The proc argument must accept the same number of arguments as the number of 
; supplied lsts, and all lsts must have the same number of elements. 

;reduce f ridentity list -> value
;    reduce is a variant of fold.
;    ridentity should be a "right identity" of the procedure f -- that is, 
;    for any value x acceptable to f,
;    (f x ridentity) = x


  (if (cons? program)
;      (+ 1 (reduce #'+ 
      (+ 1 (reduce  +  0 
                   (map count_cross_points 
                        (rest program) ; эта ведь часть будет уже на единицу меньше!
;                        (make-list (list-length program)  ret)
                        (make-list (- (list-length program) 1)  ret)
                        ) 
                   ))
    ret) 
)
;;-------------------------------------------------------------------------------
;;  посчитаем число точек в дереве (программе);  
;;  (учитывая функции так же как и терминалы)
;;-------------------------------------------------------------------------------
(define (count-crossover-points  program)

 (count_cross_points  program 1)

)
;;-------------------------------------------------------------------------------
;;  посчитаем число функциональных (внутренних) точек
;;  в программе;
;;-------------------------------------------------------------------------------
(define (count-function-points  program)

 (count_cross_points  program 0)

)
;;-------------------------------------------------------------------------------
;;   Given a tree or subtree, a pointer to that tree/subtree and
;;   an index return the component subtree that is 
;;   labeled with an internal point that is numbered by Index. 
 
;;   We number left to right, depth first.
;;-------------------------------------------------------------------------------


; For do*, the first init form is evaluated, then the first var is bound to that 
; value, then the second init form is evaluated, then the second var is bound, 
; and so on; in general, the initj form can refer to the new binding vark if 
; k < j, and otherwise to the old binding of vark. 

; [Macro]
; return [result]
; (return form) is identical in meaning to (return-from nil form); it returns 
; from a block named nil. Blocks established implicitly by iteration constructs 
; such as do are named nil, so that return will exit properly from such a construct. 


;;-------------------------------------------------------------------------------
(define (get-function-subtree  tree  pointer-to-tree index)
;     например такой вызов:  (first new-male) new-male male-point)

;(printf "tree= ~s  pointer-to-tree= ~s  index= ~s \n"  tree  pointer-to-tree index)


(let (
  (flag_return 'undef)
  (argument    'undef)
  (ret1        'undef)
  (ret2        'undef)
  (ret3        'undef)
  )

  (if (= index 0)

    (values pointer-to-tree (copy-tree tree) index)
    
    (when (cons? tree)

        ;; --------------------------------------
        ;(begin
        (set! ret1  nil)
        (set! ret2  nil)
        (set! ret3  index)
        (set! flag_return       #f) ;  проэмулируем работу оператора RETURN
        ;; --------------------------------------
        (do (
;        (do* (
;              var1        init1        step1  
             (tail      (rest tree)  (rest tail))
;              (argument (first tail) (first tail)) ; ха-ха, можно обойтись!
             )
;               endtest    result
;            ((or flag_return (not tail)) (values nil nil index)) ; not tail - это что?
            ((or flag_return (not tail)) (values ret1 ret2 ret3)) ; not tail - это что?
 

          (printf "DO body ..............................  \n")
          (set! argument (first tail))

;          do body
;          (multiple-value-bind  (new-pointer new-tree new-index)
          (let-values (((new-pointer new-tree new-index)
              (if (cons? argument) ; только здесь отличие ?? 
                  (get-function-subtree  argument tail (- index 1))
;                  (values  nil nil index)
                  (values  ret1 ret2 index)
                  )
              ))
            
            (if (= new-index 0)
                (begin
                (set!  flag_return       #t) 
                (set!  ret1   new-pointer) 
                (set!  ret2   new-tree) 
                (set!  ret3   new-index) 
                (printf "= .................................. ->>>> new-index 0 \n")
                ; (return (values new-pointer new-tree new-index)) ; break DO
                ;(set! tail #f) ; попробуем так хитро проэмулировать RETURN
                ;; но так не работает инициация  (rest tail)
                ;(set! tail null) - опять не работает
                ;(set! tail (cons 1 nill))
                 )

                (setf index new-index)
                )
            )

          )
        ;; --------------------------------------
        ;)
        ;; --------------------------------------

      (values nil nil index)
    ) ;  when
  ) ; if
))
;;-------------------------------------------------------------------------------
;;    - The selection of the
;;      branch is biased according to the number of
;;      points in that branch.
;;-------------------------------------------------------------------------------
(define (branch_select_ind_true  program)

(let (
  [ind             'undef]
  [selected-point  'undef]
  [points_list     'undef]
  [sum             'undef]
  (program-as-list   program)
  )

  ;(setf points_list (make-list *l*))
  (setf points_list (make-vector *l*))

  ;; заполним список из кол-ва точек скрещивания в каждом фун.дереве
  (dotimes (i *l*)
;    (setf (nth i points_list)
;           (count-crossover-points (nth i program-as-list)) 
;           )
    (vector-set! points_list i
           ;(count-crossover-points (nth i program-as-list)) 
           (count-crossover-points (vector-ref program-as-list i)) 
           )
  )

  ;; ---------------------------------------------------------------
  ;; выберем случайную точку на сумме всех интервалов
  ;; - дополнительная случ. функция, мешающая сравнению двух методов
  ;; ---------------------------------------------------------------
  (setf selected-point (random-integer (reduce #'+ points_list)))
  ;; ---------------------------------------------------------------

  ;; циклом по интервалам определим куда эта точка попала
  (setf sum 0)

  (dotimes (i *l*)
    ;(setf sum (+ sum (nth i points_list)))
    (setf sum (+ sum (vector-ref points_list i)))
    (when (< selected-point sum)
        (progn 
            (setf ind i)
            (return))  ;????????????????????
      )
  )

  ind
))
;;-------------------------------------------------------------------------------
(define (branch_select_ind  program)

  (if (= *l* 1) 
      0
      (branch_select_ind_true program)
      )
)
;;-------------------------------------------------------------------------------
;; мутировать программу, указав (оборвав) случайную точку в дереве
;; и заменив новым поддеревом, созданным тем же образом, что и начальная
;; случайная популяция
;;-------------------------------------------------------------------------------
(define (mutate_branch  branch-tree ind)

(let (
  (fun_list  (get_sms ind))     
  (mutation-point 'undef)
  (new-subtree    'undef)
  (new-branch     'undef)
  (_new-branch    'undef)
  )

  (setf mutation-point (random-integer (count-crossover-points branch-tree)))
  (printf "mutate_branch: mutation-point= ~s ~n" mutation-point)

  (setf new-subtree (create-individual-subtree
                fun_list
                *max-depth-for-new-subtrees-in-mutants* #t nil))
;                *max-depth-for-new-subtrees-in-mutants* t nil))

  (printf "mutate_branch: new-subtree= ~s ~n" new-subtree)

  (setf _new-branch  (copy-tree branch-tree))
  (setf  new-branch  (list _new-branch))
  ;; скорее всего - заключаем в оболочку конс-пары, чтобы использовать второй NIL,
  ;; как ограничитель в итерационном поиске..?

  ;(setf new-branch (list (copy-tree branch-tree)))
  ;(if *debug_print* (format t "new-branch= ~A ~%" new-branch))

  ;(multiple-value-bind 
  (let-values (
      ((subtree-pointer fragment)

      ;; получим указатель на точку мутации
      ;(get-subtree (first new-branch) new-branch mutation-point)
      (get-subtree _new-branch new-branch mutation-point)
      )
      )

;    ;; не интересует, то что мы отрезаем нафиг
;    (declare (ignore fragment))

    (printf "subtree-pointer= ~s ~n" subtree-pointer)
;    ;; заменяем новым поддеревом
;    (setf (first subtree-pointer) new-subtree)
  )

  new-branch
))
;;-------------------------------------------------------------------------------
(define (mutate  program)

(printf "mutate:  program= ~s \n" program)


(let (
  (ind          'undef)
  (branch-tree  'undef)
  (new-branch   'undef)
  (new_program  'undef)
  )

  (printf "001 \n")
  (setf ind         (branch_select_ind program)) ;; выбрали вeтку (хромосому) 

  (printf "002 ind = ~s \n" ind)
  ;(setf branch-tree (nth ind program))
  (setf branch-tree (vector-ref program ind))

  (printf "003 \n") 
  (setf new-branch (mutate_branch branch-tree ind))
 
  ;(setf new_program (copy-individual-substituting-branch  _new-branch program ind_branch))
  (setf new_program (copy-individual-substituting-branch (first new-branch) program ind))

  (printf "mutate:  new_program= ~s \n" new_program)

  new_program
))
;;-------------------------------------------------------------------------------
;; делать копию программы "program-to-copy" заменяя одну ветку (задаваемую
;; параметром "branch") новой веткой поддерева, созданной до этого (скрещиванием)
;;-------------------------------------------------------------------------------
;(defun copy-individual-substituting-branch
;       (new-branch-subtree  program_old ind_branch)

;(let (
;  (program_new (make-list *l*))
;  ) 

;  ;; заполним, частично используя program_old
;  (dotimes (index  *l*)

;    (setf (nth index program_new) 
;          (if (= index ind_branch)
;              new-branch-subtree
;              (copy-tree (nth index program_old))
;              ))
;  )

;  program_new
;))
;;-------------------------------------------------------------------------------
;;   выполняет скрещивание программ Male и Female by calling
;;   the function How-To-Crossover-Function, which will cause it
;;   to perform crossover at either function points or at any point.

;;   The crossover happens between a compatible pair of branches
;;   in the two parents.
;;   Once the crossover has happened the function returns two new
;;   individuals to insert into the next generation.
;;-------------------------------------------------------------------------------
(define (crossover-selecting-branch
         how-to-crossover-function  M F) ; M=male F=female (структуры)

  (errprintf "(crossover-selecting-branch ... ~n")
  (errprintf "how-to-crossover-function = ~s ... ~n" how-to-crossover-function)

(let* (
  (ind      (branch_select_ind M))

;  (M_branch (nth ind M))
;  (F_branch (nth ind F))
  (M_branch (vector-ref M ind))
  (F_branch (vector-ref F ind))
  )

  ;(multiple-value-bind (new_M_branch new_F_branch)
  (let-values ((
      (new_M_branch new_F_branch)
      (funcall how-to-crossover-function
               M_branch F_branch
               )
      ))

    (values 
     (copy-individual-substituting-branch  new_M_branch M ind)
     (copy-individual-substituting-branch  new_F_branch F ind)
     )
  )

))
;;-------------------------------------------------------------------------------
;;   Performs crossover on the programs at any point
;;   in the trees.
;;-------------------------------------------------------------------------------
;(defun crossover-at-any-points (M F)

;  (crossover-selecting-branch 
;            #'crossover-at-any-points-within-branch M F)
;)
;;-------------------------------------------------------------------------------
;;  выполнить скрещивание двух программ в функциональной (внутренней) точке, 
;;  в случайно выбранной ветке деревьев
;;-------------------------------------------------------------------------------
(define (crossover-at-function-points  male female)

  (errprintf "(crossover-at-function-points ... ~n")

  (crossover-selecting-branch
            #'crossover-at-function-points-within-branch  male  female)
)
;;-------------------------------------------------------------------------------
;(defun do_attempts_gp_old (
;                       r_min-depth-of-trees
;                       )

;(let (
;  (minimum-depth-of-trees  (symbol-value r_min-depth-of-trees))
;  )

;    (format t "--------- do_attempts_gp -------------- ~%")
;    (format t "minimum-depth-of-trees= ~A ~%" minimum-depth-of-trees)
;    ;; значит эта глубина была уже возможно заполнена, поэтому подтолкнем 
;    ;; счетчик глубины
;    (incf minimum-depth-of-trees)

;    ;; подтолкнем и мксим. глубину тоже, чтобы держать ее на уровне с минимальной
;    (setf *max-depth-for-new-individuals*
;          (max *max-depth-for-new-individuals* minimum-depth-of-trees))

;    (format t "minimum-depth-of-trees= ~A ~%" minimum-depth-of-trees)
;    (format t "--------------------------------------- ~%")
;  (set r_min-depth-of-trees       minimum-depth-of-trees) ;;????
;))
;;-------------------------------------------------------------------------------
(define (do_attempts_gp)

  (incf *minimum-depth-of-trees*)
  
  ;; подтолкнем и мксим. глубину тоже, чтобы держать ее на уровне с минимальной
  (set! *max-depth-for-new-individuals*
        (max *max-depth-for-new-individuals* 
             *minimum-depth-of-trees*)
        )
)
;-------------------------------------------------------------------------------
(define (get_sms  i)

  ;(errprintf "get_sms:  i=~s   *sms_list*=~a  ~n"  i *sms_list*)
  ;(exit)


  (when (>= i (list-length *sms_list*))
  ;(when (> i *l-1*)
        (setf i 0))

  (nth i *sms_list*)
)
;-------------------------------------------------------------------------------
;   Creates a new individual with ADF structure.
;-------------------------------------------------------------------------------
(define (create-new-program_ADF_ 
                                size
                                minimum-depth-of-trees
                                maximum-depth-of-trees                        
                                ind_index full-cycle-p
                                )

;(printf "create-new-program_ADF_: size= ~s ~n" size)

(let (
   ;(program_new (make-list size))
   ;(program_new (make-list size 'unbound-v)) - не будем использовать списки, 
   ; поскольку они не мутируемы..
   (program_new (make-vector size))
   ) 

  (when *debug_print* (printf "create-new-program_ADF_ ~n"))
  (when *debug_print* (printf "size= ~A ~n" size))

  (dotimes (i  size)
    ;(setf (nth i program_new) 
    (vector-set! program_new  i

          (create-program-branch (get_sms i) 
                                 *method-of-generation*
                                 minimum-depth-of-trees 
                                 
                                 (if *is_ADF_as_OLD*
                                     maximum-depth-of-trees 
                                   (- maximum-depth-of-trees 1) ; так было здесь ..2part
                                   ;; We count one level of depth for the root above all 
                                   ;; of the branches that get evolved. 
                                   )
                                 ind_index full-cycle-p)
          )
    )
  
  (when *debug_print* (printf "create-new-program_ADF_ ~n"))

  program_new  
))
;-------------------------------------------------------------------------------
; вроде объявляли индекс изменяющимся, но похоже что не меняется дальше..
;
(define (create_gp_program  ind_index)

;  (when (zerop (mod ind_index
  (when (zero? (modulo ind_index
                    (max 1 (- *max-depth-for-new-individuals*
                              *minimum-depth-of-trees*))
                    ))
    (setf *full-cycle-p* (not *full-cycle-p*)))
  
  ;; Create a new random program.
  (create-new-program_ADF_ *l*
                           *minimum-depth-of-trees* 
                           *max-depth-for-new-individuals*
                           ind_index  
                           *full-cycle-p*
                           )
)
;;;=============================================================================

;;-------------------------------------------------------------------------------
;;(eval-when (:execute ) 
;;(eval-when (:load-toplevel ) 
;;(eval-when (:compile ) 
;;-------------------------------------------------------------------------------
(define (genotype_print_adf 
               program ;; genotype ; the structure to be printed
               )
  
  (dotimes (i  *l-1*)
    ;(format t  "ADF~D: ~S ~%" i (nth i program))
    (printf  "ADF~s: ~s ~n" i (vector-ref program i))
    )

  (printf  "RPB0: ~s ~n" (vector-ref program *l-1* ))

)
;;-------------------------------------------------------------------------------
(define (gp_kernel_init)

  ;(c_gena_init)
  (setf  *is_print*  #t)

  ;;(setf *eval_prog* 'fast-eval)
  (setf *eval_prog*  'eval)

;  (setf *flag_error*     nil)
;  (setf *is_ADF_as_OLD*  nil)
  (setf *flag_error*     #f)
  (setf *is_ADF_as_OLD*  #f)

;  (setf *get_starter*     #'(lambda (program) (nth *l-1* program)))
  (setf *get_starter*     #'(lambda (program) (vector-ref program *l-1* )))

  (setf *genotype_print*    (lambda (genotype) (genotype_print_adf genotype)))

)
;;-------------------------------------------------------------------------------
;;)

(gp_kernel_init)

;;;;=============================================================================
;;;;
;;-------------------------------------------------------------------------------
;; The most popular termination criterion is to stop the current run if we have 
;; reached a prespecified maximum number G of generations to be run or if we
;; have attained some prespecified perfect level of performance. This level of 
;; performance may be the achievement of a standardized-fitness of zero or the 
;; achievement of a hit for 100% of the fitness cases. 
;;-------------------------------------------------------------------------------
;(defun define_termination_criterion_HITS (
;        current-generation                                 
;        maximum-generations	                                     
;        best-standardized-fitness	                             
;        best-hits)
	                                             
;  ;; best-hits is the number of hits for the individual in the population 
;  ;; with the best (i.e., lowest) standardized fitness. Note that
;  ;; occasionally the highest number of hits is attained by an individual 
;  ;; in the population other than the individual with the
;  ;; best standardized-fitness.

;  ;; Line states that one of the four arguments (i.e. best-standardized-fitness) 
;  ;; is to be ignored for this particular problem.  
;  (declare (ignore best-standardized-fitness))	                     

;  (values	                                                     
;    (or (>= current-generation  maximum-generations)	             
;        (>= best-hits          *number-of-fitness-cases*)
;    ))	                                                             
;)	                                                             
;;-------------------------------------------------------------------------------
(define (set_problem_parameters  problem-function)

(let ( 
  [fitness-cases            null] ;NIL]
  [fitness-function       'undef]
  [termination-predicate  'undef]

  [fitness-cases-creator  'undef]
  [parameter-definer      'undef]
  )

  ;(printf "4.... ~n")

;  (multiple-value-setq (
  (define-values (
            fitness-cases-creator fitness-function
            parameter-definer
            termination-predicate
            ) 
    (funcall problem-function)
            )
  ;(printf "5.... ~n")
 
  (funcall parameter-definer) 

  (when (not (eq fitness-cases-creator NIL))
    (set! fitness-cases (funcall fitness-cases-creator))
  )

  ;(printf "6.... ~n")

  (values  fitness-cases fitness-function termination-predicate)  
))
;;-------------------------------------------------------------------------------
(define (run-g-p-system 
                      problem-function
                      ;seed
                      maximum-generations
                      size-of-population
                      
                      ;&rest seeded-programs
                      seeded-programs
                      )

(let ( ; локальные переменные
  [population            'undef]
  [fitness-cases         'undef]
  [fitness-function      'undef]
  [termination-predicate 'undef]
  )

  ;; -------------------------------
  ;(multiple-value-setq (
  (define-values (
            fitness-cases fitness-function
            termination-predicate
            ) 
    (set_problem_parameters problem-function)
    )
  ;; -------------------------------
    
  (gp_init_0)

  (set! population (population_create 
                                        size-of-population
                                        seeded-programs
                                       
                                        'create_gp_program
                                        'do_attempts_gp
                                        ))

  (execute_generations_  population  maximum-generations

                         (if *is_ADF_as_OLD*
                             'sort-population-by-fitness_1
                             'sort-population-by-fitness_0
                           )

                         *method-of-selection* 
                         fitness-function fitness-cases     
                         termination-predicate 

                         (+ *crossover-at-function-point-fraction*
                                *crossover-at-any-point-fraction*)
                         *reproduction-fraction*
                         'gp_crossover 'mutate

                         #'(lambda (maximum-generations) (begin 
                           (ga_print_parameters maximum-generations)
                           (gp_print_parameters)
                           ))
                         *is_print* 
                         )
  
  ;; возвращаем "population" и "fitness cases" (для отладки) 
  (values population fitness-cases)  

))
;;-------------------------------------------------------------------------------
;(defun run-genetic-programming-system (problem-function
;                                       seed
;                                       maximum-generations
;                                       size-of-population

;                                       &rest seeded-programs
;                                       )
;(let (
;  )

;  (seed_set seed)

;  (run-g-p-system problem-function
;                 ;;seed
;                 maximum-generations
;                 size-of-population
                 
;                 seeded-programs
;                 )
  
;))
;;;;=============================================================================


;;;;=============================================================================
;;;;
;;-------------------------------------------------------------------------------
;(defun calc_R (z P)

;(let ((EPS (- 1.0 z))
;      R)  

;  (case  P
;      (1  (setf R 0.0))
;      ;(0  (setf R 99999))
;      (0  (setf R NIL))
;      (otherwise (setf R (/ (log EPS) (log (- 1.0 P)))) )
;      )
;  R
;))
;;-------------------------------------------------------------------------------
;(defun test_R_one (z P)

;(let ((R (calc_R z P)))

;  (format t "R= ~A []= ~A ~%" R (ceiling R))

;))
;;-------------------------------------------------------------------------------
;(defun test_R ()

;(let ((z 0.99))  

;  (test_R_one z 0.09)
;  (test_R_one z 0.68)
;  (test_R_one z 0.78)
;  (test_R_one z 0.90)
;  (test_R_one z 0.99)

;  ;; Figure 8.2 shows a graph of the number of independent runs R(z) required to 
;  ;; yield a success with probability z = 99% as a function of the
;  ;; cumulative probability of success P(M, i). 

;  ;; P(M, i)     independent runs are required
;  ;; ---------------------------------------------
;  ;; 0.09        48

;  ;; 0.68         4
;  ;; 0.78         3  
;  ;; 0.90         2  
;  ;; 0.99         1 

;  ;; The three values of P(M, i) of 68% (i.e., about two-thirds), 
;  ;; 78% (i.e., about three-quarters), and 90% are important thresholds
;  ;; since they are the smallest percentages of success for which only four, three, 
;  ;; or two independent runs, respectively, will yield a success with a
;  ;; probability of z = 99%.
;  ;;                                                            (Page 195)

;  ;; РЕАЛЬНО ПОЛУЧАЕТСЯ: (т.е. в книге указаны не ceiling, а floor !)
;  ;; R= 48.829777 []= 49 
;  ;; R= 4.0416293 []= 5 
;  ;; R= 3.0414684 []= 4 
;  ;; R= 2.0000007 []= 3 
;  ;; R= 1.0 []= 1 
;))
;;-------------------------------------------------------------------------------
;(defun runs_GPS (num_runs
;                 problem  seed  num_gens  size)
  
;  (setf  *is_print*  nil) ; не печатать лишнюю инфу при запусках

;  ;; попытка автоматически выдавать случайное начало...
;  ;; (format t "seed= ~A  ~%"  seed)
;  (if (< seed 0) ;; для тeста (40 (runs_GPS   5 'MAJORITY-ON  0.0 21 100)) нe выполняeтся!

;      ;(setf seed (park-miller-randomizer))
;      (setf seed (YRandF 0 1.0)) ; замeним !!!

;      ;(format t "seed>=0 ~%") ;; t 
;   ) 
;  ;; (format t "seed= ~A  ~%"  seed)

;  ;; -----------------------------------------------
;  ;; локальные переменные
;  (let* (results sum pp P
;                 )

;  ;; создадим массив для результатов и обнулим его
;  (setf  results (make-array num_gens))
;  (dotimes (i num_gens)
;    (setf (aref results i) 0)
;    )
  
;  ;; проведем серию вычислений (запусков)
;  (dotimes (i num_runs)
;    (if (= i 0) 
;        (setf  *is_print_run_info*  t)
;        (setf  *is_print_run_info*  nil)
;      )
;    (format t "~4D) ~%" i)
;    (run-genetic-programming-system  problem seed num_gens size)
;    ;; здесь надо понять - был ПОЛНЫЙ успех или нет?
;    ;; и если да, то суммировать:
;    ;(format t "CALC_HITS= ~D ~%"  (individual-hits  *best-of-run*))
;    ;(format t "TRUE_HITS= ~D ~%"  *number-of-fitness-cases*)
;    ;(format t "~%")  

;    (if (= (ORGANISM-hits  *best-of-run*) *number-of-fitness-cases*) 
;    (let* (
;           (gen *generation-of-best-of-run*)
;           (res (aref results gen))
;           )
;      ;; суммируем количество успехов именно на этом поколении
;      (setf (aref results gen) (+ res 1))
;      ))
;    )
  
;  ;; распечатаем массив результатов (предварительно их накапливая)
;  (format_line75)
;  (format t "~%")

;  (setf  sum 0)
;  (dotimes (i num_gens)

;  (let (R R_min R_max ind ind_min ind_max)

;    (setf  sum (+ sum (aref results i)))

;    (setf  pp (/ sum num_runs)) ; кумулятивная вероятность
;    (setf  P (* 100.0 pp))      ; кумулятивная вероятность (в процентах)

;    (setf  R (calc_R 0.99 pp))

;    (format t "~2A]   ~3A ~4A ~6,2F %    " i (aref results i) sum P)
;    (format t "R= ~7,1F    " R)

;    (if R (progn
;              (setf  R_min (floor   R))
;              (setf  R_max (ceiling R))
;              (setf  ind     (* R (+ i 1) size))
;              (setf  ind_min (* R_min (+ i 1) size))
;              (setf  ind_max (* R_max (+ i 1) size))
;              (format t "I= ~10,2F [~7D  ~7D]" ind ind_min ind_max)
;              ))

;    (format t "~%")
;    )
;  )

;;===============================================================================
;  ;; да вроде это тоже что и в книге, только сначала вычисляю не "мгновенную" вероятность
;  ;; для каждого поколения, а "мгновенное" количество успехов, а потом уже его суммирую.
  
;  ;; We start the process of measuring the amount of processing required by 
;  ;; experimentally obtaining an estimate for the probability g(M, i) that a
;  ;; particular run with a population of size M yields, for the first time, 
;  ;; on a specified generation i, an individual satisfying the success predicate
;  ;; for the problem. The experimental measurement of g(M, i) usually requires 
;  ;; a substantial number of runs.
;  ;; In any event, once we have obtained the instantaneous probability g(M, i) 
;  ;; for each generation i, we compute the cumulative probability of
;  ;; success P(M, i) for all the generations between generation 0 and generation i.
;  ;;                                                                  (Page 194)
;))   
;;;;=============================================================================
;;-------------------------------------------------------------------------------
;(defun koza_test_num (name num)

;(let ((form)
;  )

;  (setf form (funcall (read-from-string  name) (parse-integer  num)))
       
;  (eval form)
;  (format t "~%")

;))
;;-------------------------------------------------------------------------------
;;;;=============================================================================
;(defun RUN (argus)

;(let (
;  (name (first argus))
;  )

;(cond 

;   ((eq name NIL)  (progn 
;       (format t "~%")
;       (format t "KOZA-RUN ~%")
;       (format t "~%")
;       ))

;   (t  (progn 
;         ;(compile 'koza_test_num)
;         ;(compile 'run-genetic-programming-system)
;         ;(compile 'execute-generations)  ;; почему-то не ускоряется..
;         ;(if (not (compiled-function-p #'execute-generations))
;         ;    (exit)
;         ;    )
;         ;(format t "RUN ~%")
;         ;(compile-file "koza-3.cl") ; компилирует, ну а дальше то чего?
;         (koza_test_num  name (second argus))
;       ))
;)  

;))
;;-------------------------------------------------------------------------------
;(defun test1 (argus)  (declare (ignore argus))

;(let (tr1 tr2)

;  (setf tr1     '(and a1 a2)
;        )

;  (setf tr2 '(or (and a3 a4) a5)
;        )

;  (format t "tr1 = ~A ~%"  tr1)
;  (format t "tr1_count-function-points = ~A ~%"  (count-function-points  tr1))
;  (format t "tr1_count-crossover-points= ~A ~%"  (count-crossover-points tr1))
;  (format t "~%")
;  (format t "tr1_count_cross_points_0 = ~A ~%"   (count_cross_points  tr1 0))
;  (format t "tr1_count_cross_points_1 = ~A ~%"   (count_cross_points  tr1 1))
;  (format t "~%")

;  (format t "tr2 = ~A ~%"  tr2)
;  (format t "tr2_count-function-points = ~A ~%"  (count-function-points  tr2))
;  (format t "tr2_count-crossover-points= ~A ~%"  (count-crossover-points tr2))

;  (format t "~%")
;))
;;;;=============================================================================

