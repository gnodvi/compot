<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "HTTP://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="HTTP://www.w3.org/1999/xhtml" xml:lang="en-gb" lang="en-gb" >
<head>
<title>
Dyalog APL
</title>
<link rel="stylesheet" type="text/css" href="xhtml.css"/>
<meta http-equiv="Content-Language" content="en-gb"/>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<meta name="author" content="The D-Functionistas"/>
<meta name="description" content="Dyalog APL"/>
<meta name="generator" content=""/>
<meta name="keywords" content="apl,algorithms,computation,computers,computing,dfns,'direct definition',dyalog"/>

<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-28909969-2 ']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>

</head>
<body>
<pre>
---------------------------------------------------------
D-functions and operators loosely grouped into categories
---------------------------------------------------------

Click function name in list below to see notes, and within the note:

                     ┌───────────── click here to see function coding
    ┌────────────────│─────────── ···
    │ rslt ← larg ##.foo rarg       ⍝ description ···
    │
    │ ··· related function →goo← is a ···
    │                       │
    │ See also: hoo koo ··· │
    └───────────│───────────│─── ···
                │           │
                │           │
                └───────────┴─── click here to see notes for related functions.

The  above "header line" in the notes gives a _hint_ of the syntax of the funct-
ion or operator it describes. The informal syntax is modelled on the header line
<a href="n_for.htm">for</a> a traditional APL function in that it names its arguments and results and an
_optional_ left argument is embraced by curly braces. Default values for option-
al left arguments are indicated by assignment '←'.  Here is an example:

    fmat ← {gap←1 {max←⎕pw}} ##.cols items      ⍝ Multi-column display.
           └───────┬───────┘
                   │
                   └──────── [cols] takes an optional 1 or 2 item left argument,
                                    with default values 1 and ⎕pw.

Note that some functions appear in more than one category.

·   Structures.
·   ·
·   ·   Arrays.
·   ·   ·   <a href="n_alists.htm">alists</a>          ⍝ Association lists.
·   ·   ·   <a href="n_acc.htm">acc</a>             ⍝ Accumulating reduction.
·   ·   ·   <a href="n_at.htm">at</a>              ⍝ Prefix-friendly @.
·   ·   ·   <a href="n_bags.htm">bags</a>            ⍝ Multisets / bags.
·   ·   ·   <a href="n_box.htm">box</a>             ⍝ Box the simple text array ⍵.
·   ·   ·   <a href="n_chksum.htm">chksum</a>          ⍝ Simple ⍺-digit checksum.
·   ·   ·   <a href="n_cmat.htm">cmat</a>            ⍝ ⍺-combination matrix of ⍳⍵.
·   ·   ·   <a href="n_cols.htm">cols</a>            ⍝ Multi-column display.
·   ·   ·   <a href="n_Depth.htm">Depth</a>           ⍝ Apply fn ⍺⍺ at depths ⍵⍵.
·   ·   ·   <a href="n_disp.htm">disp</a>            ⍝ Boxed sketch of nested array.
·   ·   ·   <a href="n_display.htm">display</a>         ⍝ Boxed display of array.
·   ·   ·   <a href="n_displays.htm">displays</a>        ⍝ Boxed display of array with axis lengths.
·   ·   ·   <a href="n_displayr.htm">displayr</a>        ⍝ Boxed display of array with subarray depths.
·   ·   ·   <a href="n_dist.htm">dist</a>            ⍝ Levenshtein distance.
·   ·   ·   <a href="n_dsp.htm">dsp</a>             ⍝ Reduced version of disp.
·   ·   ·   <a href="n_enlist.htm">enlist</a>          ⍝ List ⍺-leaves of nested array.
·   ·   ·   <a href="n_find.htm">find</a>            ⍝ Lines containing string(s) ⍵.
·   ·   ·   <a href="n_from.htm">from</a>            ⍝ Select (1↓⍴⍵)-cells from array.
·   ·   ·   <a href="n_foldl.htm">foldl</a>           ⍝ Fold (reduce) from the left.
·   ·   ·   <a href="n_in.htm">in</a>              ⍝ Locations of item ⍺ in array ⍵.
·   ·   ·   <a href="n_iotag.htm">iotag</a>           ⍝ Generalized iota.
·   ·   ·   <a href="n_le.htm">le</a>              ⍝ Total array ordering (TAO) comparison.
·   ·   ·   <a href="n_list.htm">list</a>            ⍝ List from vector ⍵.
·   ·   ·   <a href="n_ltrav.htm">ltrav</a>           ⍝ List traversal.
·   ·   ·   <a href="n_match.htm">match</a>           ⍝ find with wildcards.
·   ·   ·   <a href="n_mns.htm">mns</a>             ⍝ Make NS from association list ⍵.
·   ·   ·   <a href="n_nlines.htm">nlines</a>          ⍝ Number of display lines for simple array.
·   ·   ·   <a href="n_pack.htm">pack</a>            ⍝ Saves WS by sharing identical subarrays.
·   ·   ·   <a href="n_perv.htm">perv</a>            ⍝ Scalar pervasion, apply function between scalars.
·   ·   ·   <a href="n_pmat.htm">pmat</a>            ⍝ Permutation matrix of ⍳⍵.
·   ·   ·   <a href="n_pred.htm">pred</a>            ⍝ Partitioned reduction.
·   ·   ·   <a href="n_rows.htm">rows</a>            ⍝ Operand function applied to argument rows.
·   ·   ·   <a href="n_sam.htm">sam</a>             ⍝ Select and modify.
·   ·   ·   <a href="n_saw.htm">saw</a>             ⍝ Operand function applied Simple-Array-Wise.
·   ·   ·   <a href="n_scan.htm">scan</a>            ⍝ Variations on primitive scan.
·   ·   ·   <a href="n_select.htm">select</a>          ⍝ ⍺-selection of items from vector ⍵.
·   ·   ·   <a href="n_shannon.htm">shannon</a>         ⍝ Shannon entropy of message ⍵.
·   ·   ·   <a href="n_subvec.htm">subvec</a>          ⍝ Is ⍺ a subvector of ⍵?
·   ·   ·   <a href="n_subs.htm">subs</a>            ⍝ Vector substitution.
·   ·   ·   <a href="n_type.htm">type</a>            ⍝ Array of type ⍺.
·
·   ·   <a href="n_Trees.htm">Trees</a>
·   ·   ·   <a href="n_BST.htm">BST</a>             ⍝ Binary Search Trees.
·   ·   ·   ·   <a href="n_avl.htm">avl</a>         ⍝ Adelson-Velskii, Landis (AVL) trees.
·   ·   ·   ·   <a href="n_sbst.htm">sbst</a>        ⍝ Simple binary search trees.
·   ·   ·   ·   <a href="n_redblack.htm">redblack</a>    ⍝ Red-black trees.
·   ·   ·   ·   <a href="n_splay.htm">splay</a>       ⍝ Splay trees.
·   ·   ·   <a href="n_dft.htm">dft</a>             ⍝ Display of function tree.
·   ·   ·   <a href="n_tfmt.htm">tfmt</a>            ⍝ Char matrix from tree(s).
·   ·   ·   <a href="n_tnest.htm">tnest</a>           ⍝ Array from TreeView style tree.
·   ·   ·   <a href="n_trav.htm">trav</a>            ⍝ Generic depth-first tree traversal.
·   ·   ·   <a href="n_tree.htm">tree</a>            ⍝ Display of namespace tree.
·   ·   ·   <a href="n_tview.htm">tview</a>           ⍝ TreeView style tree from nested array.
·
·   ·   <a href="n_Graphs.htm">Graphs</a>
·   ·   ·   <a href="n_assign.htm">assign</a>          ⍝ Hungarian method cost assignment.
·   ·   ·   <a href="n_gperm.htm">gperm</a>           ⍝ ⍵-permutation of vertices of graph ⍺.
·   ·   ·   <a href="n_insnode.htm">insnode</a>         ⍝ Insert vertex ⍵ in graph ⍺.
·   ·   ·   <a href="n_remnode.htm">remnode</a>         ⍝ Remove vertex ⍵ from graph ⍺.
·   ·   ·   <a href="n_inslink.htm">inslink</a>         ⍝ Insert edge ⍵ in graph ⍺.
·   ·   ·   <a href="n_remlink.htm">remlink</a>         ⍝ Remove edge ⍵ from graph ⍺.
·   ·   ·   <a href="n_search.htm">search</a>          ⍝ Breadth-first search of graph ⍺.
·   ·   ·   <a href="n_path.htm">path</a>            ⍝ Shortest path from/to ⍵ in graph ⍺.
·   ·   ·   <a href="n_span.htm">span</a>            ⍝ Breadth-first spanning tree for graph ⍺.
·   ·   ·   <a href="n_dfspan.htm">dfspan</a>          ⍝ Depth-first spanning tree for graph ⍺.
·   ·   ·   <a href="n_scc.htm">scc</a>             ⍝ Strongly connected components of directed graph ⍵.
·   ·   ·   <a href="n_stdists.htm">stdists</a>         ⍝ Spanning-tree path lengths.
·   ·   ·   <a href="n_stpath.htm">stpath</a>          ⍝ Path through spanning tree ⍺ to vertex ⍵.
·   ·   ·   <a href="n_stpaths.htm">stpaths</a>         ⍝ Spanning tree paths.
·   ·   ·   <a href="n_X.htm">X</a>               ⍝ Exact cover: Knuth's Algorithm X.
·
·   ·   <a href="n_wGraphs.htm">wGraphs</a>             ⍝ Weighted graphs.
·   ·   ·   <a href="n_wcost.htm">wcost</a>           ⍝ Cost vector for path ⍵ through _weighted_ graph ⍺.
·   ·   ·   <a href="n_wpath.htm">wpath</a>           ⍝ Quickest path from/to ⍵ in _weighted_ graph ⍺.
·   ·   ·   <a href="n_wspan.htm">wspan</a>           ⍝ Spanning tree for _weighted_ graph ⍺ from ⍵.
·   ·   ·   <a href="n_wmst.htm">wmst</a>            ⍝ Minimum Spanning Tree for _weighted_ graph ⍺.
·
·   ·   Words.
·   ·   ·   <a href="n_ssword.htm">ssword</a>          ⍝ Approx alternative to xutils' ss.
·   ·   ·   <a href="n_words.htm">words</a>           ⍝ Source vector split into words.
·   ·   ·   <a href="n_tokens.htm">tokens</a>          ⍝ Lex of APL source line.
·   ·   ·   <a href="n_von.htm">von</a>             ⍝ Capitalise first letters of names.
·
·   ·   Strings.
·   ·   ·   <a href="n_base64.htm">base64</a>          ⍝ Base64 encoding and decoding as used in MIME.
·   ·   ·   <a href="n_dist.htm">dist</a>            ⍝ Levenshtein distance.
·   ·   ·   <a href="n_find.htm">find</a>            ⍝ Search for string ⍵ in vars, fns and ops.
·   ·   ·   <a href="n_just.htm">just</a>            ⍝ Justify text array.
·   ·   ·   <a href="n_lcase.htm">lcase</a>           ⍝ Lower-casification.
·   ·   ·   <a href="n_ucase.htm">ucase</a>           ⍝ Upper-casification.
·   ·   ·   <a href="n_mtrim.htm">mtrim</a>           ⍝ Trim trailing blank columns from matrix.
·   ·   ·   <a href="n_shannon.htm">shannon</a>         ⍝ Shannon entropy of message ⍵.
·   ·   ·   <a href="n_ss.htm">ss</a>              ⍝ Approx alternative to xutils' string replacement.
·   ·   ·   <a href="n_ssmat.htm">ssmat</a>           ⍝ Matrix search/replace.
·   ·   ·   <a href="n_ssword.htm">ssword</a>          ⍝ Approx alternative to xutils' word replacement.
·   ·   ·   <a href="n_subs.htm">subs</a>            ⍝ Vector substitution.
·   ·   ·   <a href="n_subvec.htm">subvec</a>          ⍝ Is ⍺ a subvector of ⍵?
·   ·   ·   <a href="n_squeeze.htm">squeeze</a>         ⍝ Compress multiple blanks.
·   ·   ·   <a href="n_timestamp.htm">timestamp</a>       ⍝ Time-stamped message.
·   ·   ·   <a href="n_xtabs.htm">xtabs</a>           ⍝ Expand/compress HT chars.
·   ·   ·   <a href="n_htx.htm">htx</a>             ⍝ Extract html segments.
·
·   ·   <a href="n_Line_vectors.htm">Line_vectors</a>
·   ·   ·   <a href="n_htx.htm">htx</a>             ⍝ Extract html segments.
·   ·   ·   <a href="n_ltov.htm">ltov</a>            ⍝ Lines to nested vector.
·   ·   ·   <a href="n_vtol.htm">vtol</a>            ⍝ Nested vector to lines.
·   ·   ·   <a href="n_wrap.htm">wrap</a>            ⍝ Wrap word vector at ⍺ columns.
·   ·   ·   <a href="n_unwrap.htm">unwrap</a>          ⍝ Replace [LF] with blanks.
·   ·   ·   <a href="n_justify.htm">justify</a>         ⍝ Justify line-vector to ⍺ columns.
·   ·   ·   <a href="n_squeeze.htm">squeeze</a>         ⍝ Compress multiple blanks.
·   ·   ·   <a href="n_vtrim.htm">vtrim</a>           ⍝ Trim trailing blanks from line-vector.
·   ·   ·   <a href="n_wrapnote.htm">wrapnote</a>        ⍝ Wrap text paragraphs in note vector.
·   ·   ·   <a href="n_xtabs.htm">xtabs</a>           ⍝ Expand/compress HT chars.
·
·   ·   <a href="n_Blank_removal.htm">Blank_removal</a>
·   ·   ·   <a href="n_dlb.htm">dlb</a>             ⍝ Drop Leading Blanks.
·   ·   ·   <a href="n_dtb.htm">dtb</a>             ⍝ Drop Trailing Blanks.
·   ·   ·   <a href="n_deb.htm">deb</a>             ⍝ Drop Ending Blanks.
·   ·   ·   <a href="n_dxb.htm">dxb</a>             ⍝ Drop eXtraneous Blanks.
·   ·   ·   <a href="n_dmb.htm">dmb</a>             ⍝ Drop Multiple Blanks.
·   ·   ·   <a href="n_dab.htm">dab</a>             ⍝ Drop All Blanks.
·
·   ·   <a href="n_Data_compression.htm">Data_compression</a>
·   ·   ·   <a href="n_base64.htm">base64</a>          ⍝ Base64 encoding and decoding as used in MIME.
·   ·   ·   <a href="n_pack4.htm">pack4</a>           ⍝ Quad-tree packing.
·   ·   ·   <a href="n_packB.htm">packB</a>           ⍝ Pack a simple array.
·   ·   ·   <a href="n_packD.htm">packD</a>           ⍝ Pack char array to boolean vector.
·   ·   ·   <a href="n_packH.htm">packH</a>           ⍝ Huffman packing.
·   ·   ·   <a href="n_packN.htm">packN</a>           ⍝ Zero packing.
·   ·   ·   <a href="n_packQ.htm">packQ</a>           ⍝ Assorted uniQues packer.
·   ·   ·   <a href="n_packR.htm">packR</a>           ⍝ RLE packing.
·   ·   ·   <a href="n_packS.htm">packS</a>           ⍝ Shannon-Fano packing.
·   ·   ·   <a href="n_packT.htm">packT</a>           ⍝ Simple text vector packager.
·   ·   ·   <a href="n_packU.htm">packU</a>           ⍝ Unique packer.
·   ·   ·   <a href="n_packX.htm">packX</a>           ⍝ TeXt packer.
·   ·   ·   <a href="n_packZ.htm">packZ</a>           ⍝ Lempel-Ziv-Welch.
·
·   ·   Power.operators
·   ·   ·   <a href="n_cond.htm">cond</a>            ⍝ Conditional function application.
·   ·   ·   <a href="n_do.htm">do</a>              ⍝ Apply no-result function "en passant".
·   ·   ·   <a href="n_else.htm">else</a>            ⍝ Condition f else g ...
·   ·   ·   <a href="n_for.htm">for</a>             ⍝ Multiple selection of function list.
·   ·   ·   <a href="n_invr.htm">invr</a>            ⍝ Approx inverse of real-valued function.
·   ·   ·   <a href="n_limit.htm">limit</a>           ⍝ Function power limit (fixpoint).
·   ·   ·   <a href="n_pow.htm">pow</a>             ⍝ Explicit function power.
·   ·   ·   <a href="n_repl.htm">repl</a>            ⍝ Read-eval-print loop.
·   ·   ·   <a href="n_traj.htm">traj</a>            ⍝ Function limit "trajectory".
·   ·   ·   <a href="n_while.htm">while</a>           ⍝ Conditional function power.
·   ·   ·   <a href="n_until.htm">until</a>           ⍝ Conditional function power.
·
·   ·   <a href="n_Function_arrays.htm">Function_arrays</a>
·   ·   ·   <a href="n_case.htm">case</a>            ⍝ select statement.
·   ·   ·   <a href="n_for.htm">for</a>             ⍝ Multiple selection of function list.
·   ·   ·   <a href="n_of.htm">of</a>              ⍝ pick'th fn applied to arg.
·   ·   ·   <a href="n_lof.htm">lof</a>             ⍝ List of functions.
·   ·   ·   <a href="n_logic.htm">logic</a>           ⍝ logical function array.
·   ·   ·   <a href="n_vof.htm">vof</a>             ⍝ Vector of functions.
·   ·   ·   <a href="n_fnarray.htm">fnarray</a>         ⍝ Array of functions.
·
·   ·   Syntax.operators
·   ·   ·   <a href="n_and.htm">and</a>             ⍝ Sequential test.
·   ·   ·   <a href="n_cond.htm">cond</a>            ⍝ Conditional function application.
·   ·   ·   <a href="n_do.htm">do</a>              ⍝ Apply no-result function "en passant".
·   ·   ·   <a href="n_fork.htm">fork</a>            ⍝ Function fork.
·   ·   ·   <a href="n_or.htm">or</a>              ⍝ Sequential test.
·
·   ·   Expressions.
·   ·   ·   <a href="n_defs.htm">defs</a>            ⍝ ]defs with names.
·   ·   ·   <a href="n_dft.htm">dft</a>             ⍝ Display of function tree.
·   ·   ·   <a href="n_htx.htm">htx</a>             ⍝ Extract html segments.
·   ·   ·   <a href="n_joy.htm">joy</a>             ⍝ Subset of the Joy language.
·   ·   ·   <a href="n_kind.htm">kind</a>            ⍝ Parse-category of name(s) ⍵.
·   ·   ·   <a href="n_kk.htm">kk</a>              ⍝ Kind Koloring of d-fnop named ⍵.
·   ·   ·   <a href="n_lisp.htm">lisp</a>            ⍝ Evaluator for a subset of Scheme.
·   ·   ·   <a href="n_parse.htm">parse</a>           ⍝ Bunda-Gerth parsing.
·   ·   ·   <a href="n_rmcm.htm">rmcm</a>            ⍝ Remove comment from line of APL.
·   ·   ·   <a href="n_unify.htm">unify</a>           ⍝ Unification of expressions.
·
·   Numbers.
·   ·
·   ·   Whole.numbers
·   ·   ·   <a href="n_adic.htm">adic</a>            ⍝ Bijective base-⍺ numeration.
·   ·   ·   <a href="n_apportion.htm">apportion</a>       ⍝ Huntington-Hill apportionment.
·   ·   ·   <a href="n_big.htm">big</a>             ⍝ Arithmetic on large integers.
·   ·   ·   <a href="n_bsearch.htm">bsearch</a>         ⍝ Binary search: least n in range ⍵ such that ⍺⍺ n.
·   ·   ·   <a href="n_bt.htm">bt</a>              ⍝ Balanced Ternary Arithmetic.
·   ·   ·   <a href="n_cfract.htm">cfract</a>          ⍝ Continued fraction approximation of real number.
·   ·   ·   <a href="n_colsum.htm">colsum</a>          ⍝ Sum of (default decimal) columns.
·   ·   ·   <a href="n_dec.htm">dec</a>             ⍝ Decimal from hexadecimal.
·   ·   ·   <a href="n_efract.htm">efract</a>          ⍝ Egyptian fraction for ⍺÷⍵.
·   ·   ·   <a href="n_esh.htm">esh</a>             ⍝ Shell for Eide-number sums.
·   ·   ·   <a href="n_f32.htm">f32</a>             ⍝ Conversion to 32-bit floats as ⎕DR 83.
·   ·   ·   <a href="n_factorial.htm">factorial</a>       ⍝ Tail-recursive factorial.
·   ·   ·   <a href="n_fibonacci.htm">fibonacci</a>       ⍝ Tail-recursive Fibonacci.
·   ·   ·   <a href="n_factors.htm">factors</a>         ⍝ Prime factors of ⍵.
·   ·   ·   <a href="n_gcd.htm">gcd</a>             ⍝ Greatest common divisor.
·   ·   ·   <a href="n_k6174.htm">k6174</a>           ⍝ Kaprekar's operation.
·   ·   ·   <a href="n_lcm.htm">lcm</a>             ⍝ Least common multiple.
·   ·   ·   <a href="n_hex.htm">hex</a>             ⍝ Hexadecimal from decimal.
·   ·   ·   <a href="n_hexf.htm">hexf</a>            ⍝ IEEE 754/854 binary floating point.
·   ·   ·   <a href="n_int.htm">int</a>             ⍝ Signed from unsigned integers.
·   ·   ·   <a href="n_nats.htm">nats</a>            ⍝ Natural number arithmetic.
·   ·   ·   <a href="n_nicediv.htm">nicediv</a>         ⍝ ⍵ similar integers with sum ⍺.
·   ·   ·   <a href="n_osc.htm">osc</a>             ⍝ Oscillate - probably returns 1.
·   ·   ·   <a href="n_pco.htm">pco</a>             ⍝ Prime numbers.
·   ·   ·   <a href="n_range.htm">range</a>           ⍝ Numeric range classification.
·   ·   ·   <a href="n_rational.htm">rational</a>        ⍝ Rational approximation to real ⍵.
·   ·   ·   <a href="n_rats.htm">rats</a>            ⍝ Rational arithmetic.
·   ·   ·   <a href="n_ratsum.htm">ratsum</a>          ⍝ ⍺⍺-rational sum of ⍺ and ⍵.
·   ·   ·   <a href="n_roman.htm">roman</a>           ⍝ Roman numeral arithmetic.
·   ·   ·   <a href="n_stamps.htm">stamps</a>          ⍝ Postage stamps to the value of ⍵.
·   ·   ·   <a href="n_sieve.htm">sieve</a>           ⍝ Sieve of Eratosthenes.
·   ·   ·   <a href="n_to.htm">to</a>              ⍝ Sequence ⍺ .. ⍵
·   ·   ·   <a href="n_uns.htm">uns</a>             ⍝ Unsigned from signed integers.

·   ·   Rational.numbers
·   ·   ·   <a href="n_ary.htm">ary</a>             ⍝ ⍺-ary representation of rational ⍵.
·   ·   ·   <a href="n_cfract.htm">cfract</a>          ⍝ Continued fraction approximation of real number.
·   ·   ·   <a href="n_efract.htm">efract</a>          ⍝ Egyptian fraction for ⍺÷⍵.
·   ·   ·   <a href="n_esh.htm">esh</a>             ⍝ Shell for Eide-number sums.
·   ·   ·   <a href="n_gcd.htm">gcd</a>             ⍝ Greatest common divisor.
·   ·   ·   <a href="n_lcm.htm">lcm</a>             ⍝ Least common multiple.
·   ·   ·   <a href="n_rational.htm">rational</a>        ⍝ Rational approximation to real ⍵.
·   ·   ·   <a href="n_rats.htm">rats</a>            ⍝ Rational arithmetic.
·   ·   ·   <a href="n_ratsum.htm">ratsum</a>          ⍝ ⍺⍺-rational sum of ⍺ and ⍵.
·
·   ·   Real.numbers
·   ·   ·   <a href="n_abc.htm">abc</a>             ⍝ Arithmetic Boundary Checking.
·   ·   ·   <a href="n_alt.htm">alt</a>             ⍝ Alternant.
·   ·   ·   <a href="n_bayes.htm">bayes</a>           ⍝ Bayes' formula.
·   ·   ·   <a href="n_birthday.htm">birthday</a>        ⍝ Probability of same birthday.
·   ·   ·   <a href="n_cfract.htm">cfract</a>          ⍝ Continued fraction approximation of real number.
·   ·   ·   <a href="n_Cholesky.htm">Cholesky</a>        ⍝ decomposition of a Hermitian +ive-definite matrix.
·   ·   ·   <a href="n_det.htm">det</a>             ⍝ Determinant of square numeric matrix.
·   ·   ·   <a href="n_efract.htm">efract</a>          ⍝ Egyptian fraction for ⍺÷⍵.
·   ·   ·   <a href="n_gauss_jordan.htm">gauss_jordan</a>    ⍝ Gauss-Jordan elimination.
·   ·   ·   <a href="n_invr.htm">invr</a>            ⍝ Approx inverse of real-valued function.
·   ·   ·   <a href="n_kcell.htm">kcell</a>           ⍝ Relationship between point and k-cell.
·   ·   ·   <a href="n_kball.htm">kball</a>           ⍝ Relationship between point and k-ball.
·   ·   ·   <a href="n_ksphere.htm">ksphere</a>         ⍝ Hypersphere surface and volume.
·   ·   ·   <a href="n_mean.htm">mean</a>            ⍝ Arithmetic mean.
·   ·   ·   <a href="n_NormRand.htm">NormRand</a>        ⍝ Random numbers with a normal distribution.
·   ·   ·   <a href="n_phinary.htm">phinary</a>         ⍝ Phinary rep of scalar number ⍵.
·   ·   ·   <a href="n_root.htm">root</a>            ⍝ ⍺'th root.
·   ·   ·   <a href="n_roots.htm">roots</a>           ⍝ Real roots of quadratic.
·   ·   ·   <a href="n_shannon.htm">shannon</a>         ⍝ Shannon entropy of message ⍵.
·
·   ·   Complex.numbers
·   ·   ·   <a href="n_Cholesky.htm">Cholesky</a>        ⍝ decomposition of a Hermitian +ive-definite matrix.
·   ·   ·   <a href="n_cxdraw.htm">cxdraw</a>          ⍝ Complex function drawing.
·   ·   ·   <a href="n_H.htm">H</a>               ⍝ Quaternion arithmetic.
·   ·   ·   <a href="n_polar.htm">polar</a>           ⍝ Polar from cartesian coordinates.
·   ·   ·   <a href="n_xpower.htm">xpower</a>          ⍝ Fast multi-digit power using FFT.
·   ·   ·   <a href="n_xtimes.htm">xtimes</a>          ⍝ Fast multi-digit product using FFT.
·
·   ·   <a href="n_Dates.htm">Dates</a>
·   ·   ·   <a href="n_birthday.htm">birthday</a>        ⍝ Probability of same birthday.
·   ·   ·   <a href="n_cal.htm">cal</a>             ⍝ Calendar.
·   ·   ·   <a href="n_compidn.htm">compidn</a>         ⍝ Component timestamp in IDN format.
·   ·   ·   <a href="n_days.htm">days</a>            ⍝ Day number from ⎕TS format.
·   ·   ·   <a href="n_date.htm">date</a>            ⍝ ⎕TS format from day number.
·   ·   ·   <a href="n_easter.htm">easter</a>          ⍝ Easter Day in year ⍵.
·   ·   ·   <a href="n_timestamp.htm">timestamp</a>       ⍝ Time-stamped message.
·
·   Workspace.administration
·   ·
·   ·   <a href="n_Workspaces.htm">Workspaces</a>
·   ·   ·   <a href="n_exit.htm">exit</a>            ⍝ Return to calling environment.
·   ·   ·   <a href="n_fndiff.htm">fndiff</a>          ⍝ Defined function differences.
·   ·   ·   <a href="n_index.htm">index</a>           ⍝ ⍵-index of notes in space ⍺.
·   ·   ·   <a href="n_refws.htm">refws</a>           ⍝ Ref to "saved" ws ⍵.
·   ·   ·   <a href="n_test.htm">test</a>            ⍝ Run test script: no news =&gt; good news.
·   ·   ·   <a href="n_wsdiff.htm">wsdiff</a>          ⍝ Workspace differences.
·   ·   ·   <a href="n_wsmerge.htm">wsmerge</a>         ⍝ {protected} merge from saved ws.
·
·   ·   <a href="n_Namespaces.htm">Namespaces</a>
·   ·   ·   <a href="n_index.htm">index</a>           ⍝ ⍵-index of notes in space ⍺.
·   ·   ·   <a href="n_mns.htm">mns</a>             ⍝ Make NS from association list ⍵.
·   ·   ·   <a href="n_nspack.htm">nspack</a>          ⍝ Share arrays across space tree.
·   ·   ·   <a href="n_refs.htm">refs</a>            ⍝ Vector of sub-space references.
·   ·   ·   <a href="n_refmatch.htm">refmatch</a>        ⍝ Space reference match.
·   ·   ·   <a href="n_tree.htm">tree</a>            ⍝ Display of namespace tree.
·   ·   ·   <a href="n_up.htm">up</a>              ⍝ Ref to ⍵-parent of space ⍺.
·   ·   ·   <a href="n_vwise.htm">vwise</a>           ⍝ Variable-wise: apply ⍺⍺ to each var in space ⍵.
·   ·   ·   <a href="n_xrefs.htm">xrefs</a>           ⍝ Extract refs vector from array ⍵.
·
·   ·   Functions.and.operators
·   ·   ·   <a href="n_ambiv.htm">ambiv</a>           ⍝ Ambivalize traditional functions: ⍵.
·   ·   ·   <a href="n_attrib.htm">attrib</a>          ⍝ Function/operator attributes.
·   ·   ·   <a href="n_defs.htm">defs</a>            ⍝ ]defs with names.
·   ·   ·   <a href="n_din.htm">din</a>             ⍝ Evaluation of multi-line D-expression.
·   ·   ·   <a href="n_dots.htm">dots</a>            ⍝ Show dfn with "white dots".
·   ·   ·   <a href="n_externs.htm">externs</a>         ⍝ External references from dfn ⍵.
·   ·   ·   <a href="n_find.htm">find</a>            ⍝ Search for string ⍵ in vars, fns and ops.
·   ·   ·   <a href="n_fix.htm">fix</a>             ⍝ Fix function/operator rep.
·   ·   ·   <a href="n_fndiff.htm">fndiff</a>          ⍝ Defined function differences.
·   ·   ·   <a href="n_fnrefs.htm">fnrefs</a>          ⍝ External refs from tradfn ⍵.
·   ·   ·   <a href="n_fnrepl.htm">fnrepl</a>          ⍝ Function string replacement.
·   ·   ·   <a href="n_isdfn.htm">isdfn</a>           ⍝ Test for D function.
·   ·   ·   <a href="n_ncpath.htm">ncpath</a>          ⍝ ⎕path-aware ⎕nc.
·   ·   ·   <a href="n_refmt.htm">refmt</a>           ⍝ Reformat dfn/op.
·   ·   ·   <a href="n_rep.htm">rep</a>             ⍝ Representation of function/operator.
·   ·   ·   <a href="n_tc.htm">tc</a>              ⍝ Trace of function application.
·   ·   ·   <a href="n_UndoRedo.htm">UndoRedo</a>        ⍝ Derive undo/redo function.
·
·   Files.
·   ·
·   ·   Native.files
·   ·   ·   <a href="n_file.htm">file</a>            ⍝ Apply operand function to native file tie.
·   ·   ·   <a href="n_getfile.htm">getfile</a>         ⍝ Get text file ⍵ as nested vector.
·   ·   ·   <a href="n_hexdump.htm">hexdump</a>         ⍝ Hex dump of native file.
·   ·   ·   <a href="n_putfile.htm">putfile</a>         ⍝ Put rows to text-file.
·   ·   ·   <a href="n_utf8get.htm">utf8get</a>         ⍝ Char vector from UTF-8 file ⍵.
·   ·   ·   <a href="n_utf8put.htm">utf8put</a>         ⍝ Char vector ⍺ to UTF-8 file ⍵.
·   ·   ·   <a href="n_xtabs.htm">xtabs</a>           ⍝ Expand/compress HT chars.
·
·   ·   Component.files
·   ·   ·   <a href="n_filefind.htm">filefind</a>        ⍝ Find 'string' ⍵ in component file ⍺.
·
·   Performance.
·   ·
·   ·   ·   <a href="n_cf.htm">cf</a>              ⍝ Ratio of operand timings.
·   ·   ·   <a href="n_cmpx.htm">cmpx</a>            ⍝ Approx expression timings.
·   ·   ·   <a href="n_memo.htm">memo</a>            ⍝ Function memoization.
·   ·   ·   <a href="n_profile.htm">profile</a>         ⍝ Performance profiling.
·   ·   ·   <a href="n_time.htm">time</a>            ⍝ Function application time.
·
·   Miscellaneous.diversions
·   ·
·   ·   ·   <a href="n_baby.htm">baby</a>            ⍝ The Manchester Small Scale Experimental Machine.
·   ·   ·   <a href="n_bf.htm">bf</a>              ⍝ Brainfuck.
·   ·   ·   <a href="n_birthday.htm">birthday</a>        ⍝ Probability of same birthday.
·   ·   ·   <a href="n_dice.htm">dice</a>            ⍝ Interpret a throw of dice.
·   ·   ·   <a href="n_draw.htm">draw</a>            ⍝ Draw over '*'s.
·   ·   ·   <a href="n_joy.htm">joy</a>             ⍝ Subset of the Joy language.
·   ·   ·   <a href="n_kbmac.htm">kbmac</a>           ⍝ APL keyboard layouts for Mac laptops.
·   ·   ·   <a href="n_keyboards.htm">keyboards</a>       ⍝ APL keyboard layouts.
·   ·   ·   <a href="n_kt.htm">kt</a>              ⍝ Knight's Tour chess problem.
·   ·   ·   <a href="n_life.htm">life</a>            ⍝ John Conway's "Game of Life".
·   ·   ·   <a href="n_lisp.htm">lisp</a>            ⍝ Evaluator for a subset of Scheme.
·   ·   ·   <a href="n_lsys.htm">lsys</a>            ⍝ Lindenmayer L-system expansion.
·   ·   ·   <a href="n_mac.htm">mac</a>             ⍝ Simple Macro Processor for bf.
·   ·   ·   <a href="n_mayan.htm">mayan</a>           ⍝ Mayan numbers.
·   ·   ·   <a href="n_maze.htm">maze</a>            ⍝ Kidz maze.
·   ·   ·   <a href="n_mmind.htm">mmind</a>           ⍝ Mastermind or "cows and bulls".
·   ·   ·   <a href="n_morse.htm">morse</a>           ⍝ Conversion to/from Morse code.
·   ·   ·   <a href="n_mp3.htm">mp3</a>             ⍝ Create playlist(s) for mp3 directories.
·   ·   ·   <a href="n_queens.htm">queens</a>          ⍝ N-queens chess problem.
·   ·   ·   <a href="n_quine.htm">quine</a>           ⍝ Self-displaying expression.
·   ·   ·   <a href="n_quzzle.htm">quzzle</a>          ⍝ A hard, simple problem.
·   ·   ·   <a href="n_ripple.htm">ripple</a>          ⍝ Perfect Ripple Shuffle.
·   ·   ·   <a href="n_rr.htm">rr</a>              ⍝ Round-robin tournament.
·   ·   ·   <a href="n_roman.htm">roman</a>           ⍝ Roman numeral arithmetic.
·   ·   ·   <a href="n_sudoku.htm">sudoku</a>          ⍝ Solution vector for Sudoku problem ⍵.
·   ·   ·   <a href="n_turtle.htm">turtle</a>          ⍝ Flying-turtle graphics.

------------------------
Person and Topic Indexes
------------------------
Function [index] generates <a href="pindx.htm">[person]</a> and <a href="sindx.htm">[topic]</a> indexes from those lines in each
note  that  start  with  the character vector 'Index'. In addition, the note for
→<a href="n_index.htm">index</a>←  contains  lines starting Index≡, which supply aliases of the form: "For
this, see that".

-------------------------
A note on code appearance
-------------------------
The  functions  and  operators in the workspace have been formatted to make them
easier to read. For example, the "else" operator should look like this:

    else←{          ⍝ Condition f else g ...
        ⍺:⍺⍺ ⍵      ⍝ True: apply left operand.
          ⍵⍵ ⍵      ⍝ False: apply right operand.
    }

If  you  have [AutoFormat functions] checked in the Options→Configure→Trace/Edit
tab,  the system will impose its own canonical formatting style. This is OK, but
makes the functions look a little odd:

    else←{          ⍝ Condition f else g ...
         ⍺:⍺⍺ ⍵      ⍝ True: apply left operand.
         ⍵⍵ ⍵      ⍝ False: apply right operand.
     }

To see the code in its intended format, uncheck the box and try again.

-------------------
Nested Array Boxing
-------------------
Examples in this workspace that display nested arrays assume ]boxing ON and so
dispense with an explicit call to the →<a href="n_disp.htm">disp</a>← function:

Example:

    ]boxing
Is ON

    ⊃,∘⊂/⍳4         ⍝ nested vector
┌─┬───────┐
│1│┌─┬───┐│
│ ││2│3 4││
│ │└─┴───┘│
└─┴───────┘

------------
Highlighting
------------
Words in the notes may be distinguished by various styles of bracket:

→link←  Link to another note; double-click or Shift-Enter to follow the link.
[bold]  Function or argument name, equivalent to bold font.
_ital_  Emphasised word, equivalent to italic font.

------------
Note Colours
------------
When viewing these notes from an APL session (as opposed to a web browser), you
can change their colours, see: →<a href="n_colour_change.htm">colour_change</a>←.

------------
Code Colours
------------
The pages on the web that display code have been "kind-coloured".  Names in the
code have been "coloured" using an italic font to distinguish the kind of lang-
uage elements they denote:

                Kind   Font     Colour
                ----   ----     ------
               array   normal   black
            function   italic   black
    monadic operator   italic   medium blue
     dyadic operator   italic   lighter blue

See →<a href="n_kk.htm">kk</a>← for more details.

-----------------------------
Dyalog Version considerations
-----------------------------
Dfns.dws is maintained using the most up-to-date  release  of  the  interpreter.
Places in which future language developments might improve the code  are  marked
&lt;V&gt;  as  a  reminder of which code to review when the workspace moves to a newer
version.

This expression lists all of the &lt;V&gt; lines:

    {⎕←⍵ find'&lt;V&gt;'}¨refs #      ⍝ display &lt;V&gt;-lines.

--------------
Test namespace
--------------
Namespace  "scripts" contains test scripts for most of the functions and operat-
ors in the workspace. See →<a href="n_test.htm">test</a>←.

--------
Feedback
--------
Suggestions  for extending or improving this workspace would be most welcome via
email to: john@dyalog.com.

See the "Functional Programming" forum in <a href="http://forums.dyalog.com.">http://forums.dyalog.com.</a>

Dfns.dws is curated by John Scholes with contributions from:

Aaron Hsu
Adám Brudzewsky
Adrian Smith
Arthur Whitney
Blay Tarnoff
Bob Bernecky
Dag Dittmer
Dan Baronet
David Crossley
Dick Bowman
Gianfranco Alongi
Gianluigi Quario
Geoff Streeter
Jay Foad
Jim Ryan
John B. Halleck
John Daintree
John Niss Hansen
John R. Clark
Jonathan Barman
Kai Jaeger
LeRoy N. Eide
Maria Wells
Mark Johns
Mayer Goldberg
Michael Kassler
Mike Day
Maurice Jordan
Michael Baas
Morten Kromberg
Nikolay Nikolov
Nicolas Delcros
Paul Mansour
Perttu Pakarinen
Peter-Michael Hager
Phil Last
Ralf Riediger
Ray Cannon
Ray Polivka
Reima Naumanen
Roger Hui
Stefano Lanzavecchia
Stephen Taylor
Steve Mansour
Tomas Gustafsson
Veli-Matti Jantunen
Will Robertson
Yves Bopp
Yves Tanguy

Back to: <a href="http://dfns.dyalog.com/index.htm">Workspaces</a>
</pre>
</body>
</html>
