# -*-   mode: text coding: koi8   -*- ------------------------------------------
--------------------------------------------------------------------------------


1. src/optima
 
    - корректный GA для тестовых функций с мульти-целями (много минимумов), 
      а также задание начальных точек поиска, сохраненных с прошлых запусков.
    - включить в общую схему все другие алгоритмы (пчелы, сруск, диф-ный, отжиг,
      и т.д.,) как частные случаи механизма адаптации.

    - вводим систему блоков-библиотек, адаптируя операторы скрещивания и мутации
      и использую статистическое описание истории использования блоков.
    
    В итоге, поиск должен начинаться как случайный генетический и по мере накопления
    статистики использования блоков, становиться все осмысленнее и точнее.
    Сами адгоритмы поиска тоже должны подвергаться настроке через параметры,
    возможно используя, например,  алгоритмы глубоко оьучения, которые в свою
    очередь могуть являться настраиваемыми JOY-программами.


4. src/dialog

   - все перевести на мою систему Dict/Tk.
   - подумать о прикручивании своей старой библиотеки Yzone к JimTcl.

5. src/test-s/origin

   - игра Жизнь - заменить Snit на Dict/Tk, ввести правило "дальнодействия",
     т.е. разнети оценку и эффектор (через ребро, например) +
     последовательное выполнение + скрытые слои графов.
   - старый си-варинт и соответсвующий вариант мета (графы) убрать совсем? или,
     наоборот, оставить и сделать основой?


5. src/test-s/zpoker

   - ориентировать на тех.холдем/безлимит/headsup, т.е игра чисто
     психологическая и мало зависит от силы карт, а больше от блефа;
     соответственно, важно - распознать (открыть) алгоритм оппонента и его
     параметры.

     - начать лучше с РоШамБо, наладив процелуры обучения и распознавания
       алгоритма соперника а также его использование; там же можно отдалить процесс
       управления диалоговыми окнам на простом варианте (камень-ножницы-бумага);

     - далее, используя Tcl/Tk примеры, ориентироваться на GitHub разработки:
       https://github.com/apehex/awesome-poker
       https://github.com/OpenHoldem
       https://github.com/dickreuter
       

10. ext/logics
 
    - проверка теорем Metamath из Tcl/Tk (на основе MMverify.py), сначала
      на простом примере "th1";
    - поиск доказательств на основе пакета Holoprasm (+ Joy ?);
    - поднимаемся до логики 2-го порядка типа пролог, конструктивные
      доказательста с постороением алгоритмов (например сортировки как у
      Коруховой Ю.)
    - алгоритмы теории игр ?




--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

