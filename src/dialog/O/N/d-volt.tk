# -*- mode: tcl -*- ------------------------------------------------------------

#!/bin/sh
# \
exec tclsh "$0" "$@"

package require Tk

#-------------------------------------------------------------------------------

 set ::pi 3.1415927 ;# Good enough accuracy for gfx...


#-------------------------------------------------------------------------------
# Draw a meter line (and recurse for lighter ones...)
#-------------------------------------------------------------------------------
proc updateMeterLine {w a {l 0}} {

  global meter angle pi

  set oldangle $angle($l)
  set angle($l) $a
  set x [expr {100.0 - 90.0*cos($a * $pi)}]
  set y [expr {100.0 - 90.0*sin($a * $pi)}]

  $w coords $meter($l) 100 100 $x $y
  incr l

  if {[info exist meter($l)]} {

     updateMeterLine $w $oldangle $l
     }

}
#-------------------------------------------------------------------------------
# Convert variable to angle on trace
#-------------------------------------------------------------------------------
proc updateMeter {name1 name2 op} {

  upvar #0 $name1 v

  set min [.s cget -from]
  set max [.s cget -to]

  puts "VOLT updateMeter: v = $v" ;#  parent = [winfo parent .]"

  set pos [expr {($v - $min) / ($max - $min)}]

  updateMeterLine .c [expr {$pos*0.6+0.2}]
}
#-------------------------------------------------------------------------------
# Fade over time
#-------------------------------------------------------------------------------
proc updateMeterTimer {} {

  global v

  set v $v

  after 20 updateMeterTimer
}
#-------------------------------------------------------------------------------
# Create a meter 'enabled' canvas
#-------------------------------------------------------------------------------
proc makeMeter {} {

  global meter angle

  canvas .c -width 200 -height 110 -borderwidth 2 -relief sunken -bg white

  for {set i 0;set j 0} {$i<100} {incr i 5;incr j} {
    set meter($j) [.c create line 100 100 10 100 \
                     -fill grey$i -width 3 -arrow last]
    set angle($j) 0
    .c lower $meter($j)
    updateMeterLine .c 0.2 $j
  }

  .c create arc 10 10 190 190 -extent 108 -start 36 -style arc -outline red

  return .c
}
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

# Управление пиктограммами: открывать и закрывать окна позволяют операции: 
# 
# wm withdraw  - отменяет отображение окна, не заменяя его пиктограммой;
# wm iconify   - заменить окно пиктограммой; 
# wm deiconify - восстановить нормальный вид (после iconify или withdraw);
#  


# TODO: как понять, как запущена программа: отдельно или во фрейм?
#  
set ::NEW 0 ;# продвинутый оконный менеджмент, но тогда не встроить во фрейм?


if {$::NEW} {

wm withdraw . ;# iconify .  

wm attributes . -alpha 0   ;# ?? непрозрачный ??

}
#------------------------------------------------------------
# рисуем все штуки

grid [makeMeter]

grid [scale .s -orient h -from 0 -to 100 -variable v]


#------------------------------------------------------------

if {$::NEW} {

wm deiconify .  ;# теперь появляется окошко


update idletasks

# делаем другие штуки

after idle {show_windows_proc}

proc show_windows_proc {} {

  #wm geometry . "+100+100"

  # а теперь потихоньку увеличиваем alpha, используя таймер! )
}
}
#------------------------------------------------------------

# Команда trace регистрирует команду, которая будет вызвана, при попытке доступа
# к переменной, изменения ее соедржимого или удаления.
# 
# Опции: r - отслеживание попытки чтения
#        w - отслеживание попытки записи
#        u - отслеживание попытки уадлении
#        a - контроль массива
# 
# Перед использованием команды trace, переменная, предназначенная для
# отслеживания, должна быть объявлена глобальной.
# 

trace variable v   w updateMeter

updateMeterTimer ;# подчищает след от анимации

#------------------------------------------------------------


#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
