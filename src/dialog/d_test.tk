# -*-   mode: tcl  ; coding: koi8   -*- ----------------------------------------

#!/bin/sh
# \
exec tclsh "$0" ${1+"$@"}

package require Tk ;# тогда в Windows CMD виден вывод в STDOUT

#-------------------------------------------------------------------------------

#set ::COMPOT "COMPOT"
#set ::COMPOT "../.."
 
#-------------------------------------------------------------------------------

# lappend auto_path \
#   [file join [file dirname [info script]] "$::COMPOT"] 

puts ""
puts "info script = [info script]"
puts "file dirname info script = [file dirname [info script]]"
puts "file join      = [file join      [file dirname [info script]]]"
puts "file normalize = [file normalize [file dirname [info script]]]"

puts ""
puts "pwd = [pwd]"
puts ""

#-------------------------------------------------------------------------------

lappend auto_path \
  [file join [file dirname [info script]] "."] 

package require compot::common 

#-------------------------------------------------------------------------------

# перейти в текущую директорию !??
# 
#cd [file normalize [file dirname [info script]]]
#

if {0} {
  package require compot::dialog
} else {

  source "d-ker0.tl"
  source "d-kern.tl"
  source "d_plot.tk"
}

#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------



# /****************************************************************************
#  *                                                                          *
#  *  demons.c  --  demo examples for "Library Yzone";                        *
#  *                                                                          *
#  *  Copyright (c) 2000, Life Software.                                      *
#  *                                                                          *
#  *  This library is free software; you can redistribute it and/or           *
#  *  modify it under the terms of the GNU Library General Public             *
#  *  License as published by the Free Software Foundation; either            *
#  *  version 2 of the License, or (at your option) any later version.        *
#  *                                                                          *
#  *  This library is distributed in the hope that it will be useful,         *
#  *  but WITHOUT ANY WARRANTY; without even the implied warranty of          *
#  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU       *
#  *  Library General Public License for more details.                        *
#  *                                                                          *
#  *  You should have received a copy of the GNU Library General Public       *
#  *  License along with this library; if not, write to the Free              *
#  *  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.      *
#  *                                                                          *
#  *                Life Software:                                            *
#  *                Web:     http://www.chat.ru/~lifesoft                     *
#  *                E-mail:  lifesoft@chat.ru                                 *
#  *                                                                          *
#  ****************************************************************************
#  */                                                                          
                                                                             


# #ifdef  D_DIAL_1  
# /*************************************************************************/

# #include "y_zone.h" 

# int   x0group, y0group;


# enum ykeys_global {                                                             
#   MYPUSH_DOWN = YKEY_LEVEL4,                                                    
#   MYPUSH_UP                                                                     
# }; 

 


# /*-------------------------------draw_group_old---------------------------------*/
# void
# draw_group_old (char *sText, int x, int y, int w, int h, YT_COLOR color)
# {
#   int  w_char = YStringW ("W");
#   int  left = 10, dx = 5, dy = 4, xmax, ymax, xl, xr;
#   int  wtext;
#   YT_COLOR clr_white = YColor("white");
#   YT_COLOR clr_black = YColor("black");

#   xmax = x+w-1;
#   ymax = y+h-1;

#   if (color != CLR_NULL) {
#     YPaintRectF (x+2, y+2+dy, w-4, h-4-dy, color); 
#     YPaintRectF (x+2, y+2, left-2, dy, color); 
#   }

#   xl = x+left;
#   YPaintLine (x,   y,   xl, y,   clr_black);
#   YPaintLine (x+1, y+1, xl, y+1, clr_white);

#   YPaintString (sText, xl+dx, y, clr_black);
#   wtext = YStringW (sText);
#   ANTIMULTX (wtext);
#   xr = xl+dx+wtext+dx;
#   if (color != CLR_NULL) 
#     YPaintRectF (xr, y+2, xmax-2-xr+1, dy, color); 

#   YPaintLine (xr, y,   xmax,   y,   clr_black);
#   YPaintLine (xr, y+1, xmax-1, y+1, clr_white);

#   YPaintLine (x+1,    y+1,    x+1,    ymax,   clr_white);
#   YPaintLine (x,      ymax,   xmax,   ymax,   clr_white);
#   YPaintLine (xmax,   y,      xmax,   ymax,   clr_white);

#   YPaintLine (x,      y,      x,      ymax-1, clr_black);
#   YPaintLine (x,      ymax-1, xmax-1, ymax-1, clr_black);
#   YPaintLine (xmax-1, y,      xmax-1, ymax-1, clr_black);

#   return;
# }
# /*-------------------------------dialog_proc-------------------------------------*/
# long
# dialog_proc (PFUNC_VAR)
# {

#   static int  hcap = 22;
#   static int  focus, hWnd ;
#   static long image;
#   static YT_DEFWND *wnd; 
#   YT_COLOR  col_border  = YColor("red");

#   switch (message) {
#   case YGETSIZE:
#     MYSIZE_IS (W_DLG+2, H_DLG+hcap+3);
#     break;
#   case YOPEN:
#     wnd = (YT_DEFWND*) Y_WLONG1;
#     image  = YImageGet (0, 0, WND->w, WND->h);
#     focus  = YGetFocus ();
#     YKillFocus ();
#   case YDRAW:
#     YWnd (&hWnd, wnd->proc, "", 1, hcap+2, WND->w-2, WND->h-3-hcap,
# 	  wnd->long1, wnd->long2, wnd->long3, wnd->long4, wnd->color);

#     YPaintRectB  (0, 0, WND->w, WND->h, col_border);
#     YPaintRectFB (0, 0, WND->w, hcap, WIN->color, col_border);
#     /* YPaintString (WND->name, 10, 10, col_border); */
#     draw_rect_text (WND->name, 0, 0, WND->w, hcap, col_border);
#     break;
#   case YCLOSE:
#     YWndClean (id);
#     YImagePut (0, 0, image);
#     YImageFree (image);
#     YSetFocus (focus);
#     YWndFree (id);  /*??*/
#     break;
#   default: ;;
#   }

#   RETURN_TRUE;
# #undef  LONGS 
# }
# /*-----------------------------------------------------------------------*/ 
# 
proc YPaintOvalB {can  x y w h  b_color} {
 
  CALCXY  x y 
  #CALCWH  w h 
  
  #   XSetForeground (DPY, SV->gc, b_color); 
  #   XDrawArc (DPY, SV->win, SV->gc, x, y, w, h, ang_begin, ang_delta); 
  #   XFlush (DPY); 
  
  set x1 $x
  set y1 $y

  set x2 [expr $x1 + $w]
  set y2 [expr $y1 + $h]

  $can create oval $x1 $y1 $x2 $y2 ;#-fill $f_color

  return
} 
# /*--------------------------------test_picture---------------------------*/
# 
proc test_picture {can} {

  YPaintRectF  $can 40 20  80 90  "white"

  #YPaintRectFB $can  60 80   80  90  "aqua" "black"  ;# aqua -> cyan
  YPaintRectFB $can  60 80   80  90  "cyan" "black"

  YPaintLine   $can  10 10  110 110  "black"
  YPaintLine   $can  5 100  160  10  "white"

  #YPaintRectFB $can  60 70  70 40  "silver" "white"
  # silver ->  ~gray75 (or SystemButtonFace on classic Windows)
  YPaintRectFB $can  60 70  70 40  "gray75" "white"

  YPaintRectF  $can 110 40  60 80  "red"
  #YPaintRectF  $can 10 100  90 50  "fuchsia" ;# unknown color name "fuchsia"
  YPaintRectF  $can 10 100  90 50  "magenta"  ;# fuchsia ==  magenta

  YPaintString $can "This is test" 20 60 "black"
  
  YPaintLine   $can 25 25  160 150  "blue"
  YPaintLine   $can 25 25  160 152  "blue"
  YPaintLine   $can 25 25  160 154  "blue"
  YPaintLine   $can 25 25  160 156  "blue"

  #YPaintArcB 10 10  70 70 0 360*64 "black"
  YPaintOvalB  $can  10 10  70 70 "black"

   return
}
#-------------------------------------------------------------------------------
proc dial_proc {mop from message mes1 mes2 mes3 mes4  args} {
   
  puts "dial_proc: mop= $mop  message= $message"

  metaswitch -- $message  {

  "YCREATE" {
  }

  "*" * {
    set fid [FID $mop]
    puts "****************************************"
  }

  "YOPEN" + {

    set x $mes1
    set y $mes2
    set w $mes3
    set h $mes4
    set color [GET $mop "color"] 

    puts "dial_proc: YOPEN .. 1 fid = $fid"  

    YPlaceCanvas $fid $x $y $w $h  -bg $color

    puts "dial_proc: YOPEN .. 2"  
  }
  "YDRAW" {
    
    puts "dial_proc: YOPEN .. 3"  

    test_picture $fid 

    puts "dial_proc: YDRAW"  
    #     YWnd (Ph(), push_proc, "O'Key",  90, 160, 80,30, 0,0,0,0, YColor("yellow"));

    YWnd $fid.okey  push_proc "O'Key"  90 180 80 30  0 0 0 0 -color "yellow" ;# CLR_DEF  
    }

  "MYPUSH_UP" {

    #if  {$mes1 == "$fid.exit"} { exit}
    
    #   YDlgEnd (0); 

    YWndFinish $fid
    }

  }

  return
}
#-------------------------------------------------------------------------------
proc DIALOG_draw {fid_parent  x y w h} {

  YWnd [N $fid_parent "m"] dial_proc "" 0 0 $w $h  0 0 0 0 -color "lime"

  return
}
#-------------------------------------------------------------------------------
proc get_top_left_dialog_xy {w h} {

  set w  240
  set h  220
  set x  [winfo x .]
  set y  [winfo y .] 
  
  set x  [expr $x -$w -18]
  set y  [expr $y -28]

  return [list $x $y]
}
#-------------------------------------------------------------------------------     
proc page1_proc {mop from message mes1 mes2 mes3 mes4  args} {
      
  metaswitch -glob -- $message  {

  "YCREATE" {

    SET $mop "w_dialog" 240
    SET $mop "h_dialog" 220

    puts "YCREATE ................. !!!!!!!!!!!!!!1"
  }
    
  "*" * {
    set fid [FID $mop]

    puts "page1_proc:  mop= $mop (fid= $fid)  from= $from message= $message"
  }

  "YOPEN" + {

    set x $mes1
    set y $mes2
    set w $mes3
    set h $mes4
    set color [GET $mop "color"] 

    YPlaceCanvas $fid $x $y $w $h  -bg $color

  }
  "YDRAW" {
    
    set x $mes1
    set y $mes2
    set w $mes3
    set h $mes4
    set color [GET $mop "color"] 

    puts "page1_proc: YDRAW"

    #set w $mes3
    #set h $mes4

    #YPaintRectB 0 0 WND->w WND->h "black"       
    YPaintRectB $fid 0 0 $w $h "black"       

    # begin_group  $fid "ABOUT" 20 30  210 110 "teal" ;# unknown color name
    begin_group  $fid "ABOUT" 20 30  210 110 "turquoise4" ;# teal == ~turquoise4

    set clr_text "white"

    YPaintString $fid "   'Library Yzone'    " 20 20 $clr_text  
    YPaintString $fid "     version 0.2      " 20 35 $clr_text  
    YPaintString $fid " Copyright (c) 2000, 2015   " 20 60 $clr_text  
    YPaintString $fid "    Life Software.    " 20 75 $clr_text
    YPaintString $fid "  Under GNU License.  " 20 90 $clr_text 

    end_group 

    begin_group  $fid "SORRY" 20 200 210 90 "turquoise4"

    set clr_text "white"

    YPaintString $fid "     Sorry! Sorry!    " 20 20 $clr_text  
    YPaintString $fid "  This demo example   " 20 35 $clr_text  
    YPaintString $fid "          is          " 20 50 $clr_text 
    YPaintString $fid " under constructions! " 20 65 $clr_text 
    
    end_group 
    
    begin_group  $fid "YDraw.." 240 30  185 190  "darkgreen"
    test_picture $fid 
    end_group 
  
    #set w 240
    #set h 220
    #set x [winfo x   .]
    #set y [winfo x   .]


    # "самодельная" кнопка-мышь
    # 
    YWnd $fid.push_bigwindow  push_proc "BigWindow"   250 240  75 50  0 0 0 0 -color "grey"


#     set cmd2 [list  \
#                 puts "fid = $fid"   \; puts "fid = $fid"
#                ]
    
    set cmd3 [list \
                YPost $fid "PUSH2" $fid 0 0 0 ;# пошлем родителю весточку
               ]
    

    # кладем обычную Tk-кнопку 
    # 
    YCanvasButton $fid.push_moddialog "ModDialog" 340 240  75 50 -command $cmd3

    #
    # YBigWindowOld (NULL, dial_proc, "Big Window", 0,0,240,220, 0,0,0,0, CLR_DEF);
    # bind .....
  }
  
  "PUSH2" {

    puts "PUSH2 ................!!!!!!!!"


      puts ""
      puts "------------------------------------"
      puts "pointerx . =  [winfo pointerx  .]"
      puts "pointery . =  [winfo pointery  .]"
      puts "screenwidth  . =  [winfo screenwidth  .]"
      puts "screenheight . =  [winfo screenheight .]"
      puts "x        . =  [winfo x   .]"
      puts "y        . =  [winfo y   .]"
      puts "width    . =  [winfo width    .]"
      puts "height   . =  [winfo height   .]"
      puts "geometry . =  [winfo geometry .]"
      puts ""

      puts "fid = $fid" ;# ????? 
      puts "------------------------------------"
      puts ""

      # 
      #YPost [WND_parent $fid] "PUSH2" $fid 0 0 0 ;# пошлем родителю весточку
      #
      # TODO: что-то повторно не находит родителя!! ???

      set w  [WIN_get $fid "w_dialog"] ;# так в кнопке же нет этих данных
      set h  [WIN_get $fid "h_dialog"] ;# надо слать к родителю запрос!

      foreach {x y} [get_top_left_dialog_xy  $w $h] {break}

      ModDialog .big "dial_proc"  $x $y  $w $h  "Mod Dialog"
  }

  "MYPUSH_UP" {

    puts "...............!!!!!!!!!!  "

    set w  [WIN_get $fid "w_dialog"]
    set h  [WIN_get $fid "h_dialog"]
    
    foreach {x y} [get_top_left_dialog_xy  $w $h] {break}

    set user_level [MAKE_GLOBAL_NAME] ;# тогда имя каждый раз разное,
                                       # но хорошо бы научиться их уничтожать !

    YBigWindowNew [make_child_name .] $user_level "dial_proc"  $x $y  $w $h  -title "Big Window"

  }

  } ;# metaswitch

  return
}

#-------------------------------------------------------------------------------
# Read and log output from the program
#
#-------------------------------------------------------------------------------
proc Log {} {

  global ret log ;# input log
  
  if [eof $ret] {
    
    #Stop 
    puts "Stop ................"
   
  } else {
    
    gets $ret line
    
    #puts "line = $line"

    $log insert end $line\n    
    $log see end   
  }
 
  return
}
#-------------------------------------------------------------------------------
proc run_tkscript_in_frame_NEW {tkscript fid args} {
  
  global ret ;# cmd input log but


  set frameid [winfo id $fid]


  set fullpath_script "tclsh [pwd]/$tkscript"

  # проблема запустить в Windows (хотя уже указал полный путь)
  # the window to use is not a Tk container (когда вызываем  package require Tk)

  #if [catch {set pid [eval exec $fullpath_script -use $frameid  {*}$args  &]} ret] {}
  #if [catch {eval exec $fullpath_script -use $frameid  {*}$args  &} ret] {}


  #set cmd "$fullpath_script -use $frameid  {*}$args  &"
  #set cmd "$fullpath_script -use $frameid  &"
  set cmd "$fullpath_script  &"

  # eval - для объединения списка в одну команду - конкатенция параметрво

  #if [catch {exec {*}$fullpath_script &} ret] {}
  #if [catch {eval exec $cmd} ret] {}
  #if [catch {eval open "|$cmd"} ret] {}      
  if [catch {open "| $fullpath_script -use $frameid "} ret] {      

    puts ""
    puts "run_tkscript_in_frame ERROR: frameid = $frameid,  ret = $ret "
    puts ""

    #     set answer [tk_messageBox -message "run_tkscript_in_frame ERROR" \
    #                               -type yesno -icon question]

  } else {

    puts ""
    puts "run_tkscript_in_frame OK: frameid = $frameid,  ret = $ret" ;# "pid = $pid"
    puts ""

    fileevent $ret readable Log ;# функция обработки вход. данных
  }
  
  return
}
#-------------------------------------------------------------------------------
proc YCanvasScript_NEW {fid  x y w h color tkscript args} {


  YFrame $fid -bg $color ;# сначала создадим фрейм с нужным именем
  
  run_tkscript_in_frame_NEW  $tkscript $fid  {*}$args
  
  YCanvasWindow  $fid   $x $y $w $h ;# кладем фрейм как окошко в РОДИТЕЛЬСКИЙ (!)
                                     # канвас

  return
}
#-------------------------------------------------------------------------------
proc PAGE21_proc {mop from message mes1 mes2 mes3 mes4  args} {



  metaswitch -- $message  {

  "YCREATE" {
  }
    
  "*" * {
    set fid [FID $mop]
  }

  "YOPEN" + {

    set x $mes1
    set y $mes2
    set w $mes3
    set h $mes4
    set color [GET $mop "color"] 

    YPlaceCanvas $fid $x $y $w $h  -bg $color
  }
  "YDRAW" {

    #set x $mes1
    #set y $mes2
    #set w $mes3
    #set h $mes4
    
    set W 130
    set H  30
    set label_x [expr $x + $w / 2]
    set label_y [expr $y + $h / 2]
    
    #YPlaceLabelCentre $fid.label [koi_to_utf "SENS_WORK"]  $label_x $label_y  $W $H
    

    YCanvasScript  $fid.label  120 30 200 200  "white" "O/N/d-volt.tk" {}    

    #YCanvasScript_NEW  $fid.label  20 30 250 200  "white" "t-volt.tk" {} 
  }
  
  }
  
  # RETURN_TRUE;
}
#-------------------------------------------------------------------------------
proc MAPTEST_proc {mop from message mes1 mes2 mes3 mes4  args} {


  metaswitch -- $message  {

  "YCREATE" {
  }
    
  "*" * {
    set fid [FID $mop]
  }

  "YOPEN" + {

    set x $mes1
    set y $mes2
    set w $mes3
    set h $mes4
    set color [GET $mop "color"] 

    YPlaceCanvas $fid $x $y $w $h  -bg $color
  }
  "YDRAW" {

    set W 130
    set H  30
    set label_x [expr $x + $w / 2]
    set label_y [expr $y + $h / 2]
    
    # еще одна карта для тестирования иерархии:
    # 
    set butt_w 160
    set butt_h  90 
    
    set butt_x  [YRAND 20 100]
    set butt_y  [YRAND 30 100]

    #set butt_fid [make_child_name $fid]  ;# $fid.butwork
    set butt_fid $fid.button

    set map_name [MAKE_UNICUM_NAME]

    # FIXME: окошка-карта поределяется именем процедуры? Так не очень!
    #
    # но с указание имени тоже какая-то проблема !!!!!

    MapButton $butt_fid "MAPTEST"  $butt_x $butt_y $butt_w $butt_h  \
                        "MAPTEST_proc" "lightgreen"  $map_name 

  }

  }
  
  #   RETURN_TRUE;
}
#-------------------------------------------------------------------------------
proc MODMAP_HOME_proc {mop from message mes1 mes2 mes3 mes4  args} {


  metaswitch -- $message  {

  "YCREATE" {
  }
    
  "*" * {
    set fid [FID $mop]
  }

  "YOPEN" + {

    set x $mes1
    set y $mes2
    set w $mes3
    set h $mes4
    set color [GET $mop "color"] 

    YPlaceCanvas $fid $x $y $w $h  -bg "orange" ;# $color
  }
  "YDRAW" {

    #set x $mes1
    #set y $mes2
    #set w $mes3
    #set h $mes4
    
    #YDrawRectB  $fid 0 0 $w $h "black" 
    #YPaintRectFB  $fid 0 0 $w $h  [WND_color $fid] "black" 
          
    #draw_rect_text $fid [WND_name $fid] 0 0 $w $h "black"


    puts "MODMAP_HOME_proc .... "
    
    set work_x 20
    set work_y 30
    set work_w 60
    set work_h 90 
    
    MapButton $fid.butwork "PAGE21"  $work_x $work_y $work_w $work_h  \
                           "PAGE21_proc" "red"  


    set main_x $work_x
    set main_y [expr $work_y + $work_h + 20]
    set main_w $work_w
    set main_h $work_h 
    
    MapButton $fid.butmain "PAGE22"  $main_x $main_y $main_w $main_h  \
                           "MAPTEST_proc" "blue"  
    

    #run_video_player $fid "${::COMPOT}/O/M/6-240p.flv"  # запустим правой мышкой  
  }

  
  "YLMOUSEUP" {
    #YPost [WND_parent $fid] "MYPUSH_UP" $fid 0 0 0
    puts "MODMAP_HOME_proc:   YLMOUSEUP !!!"
  }

  "YRMOUSEUP" {
    #run_video_player $fid "${::COMPOT}/O/M/6-240p.flv"
    run_video_player $fid "O/V/6-240p.flv"
  }

  }
  
  #   RETURN_TRUE;
}
#-------------------------------------------------------------------------------     
proc page2_proc {mop from message mes1 mes2 mes3 mes4  args} {
        
        
  metaswitch -- $message  {

  "YCREATE" {
  }

  "*" * {
    set fid [FID $mop]
    puts "****************************************"
  }

  "YOPEN" + {

    set x $mes1
    set y $mes2
    set w $mes3
    set h $mes4
    set color [GET $mop "color"] 

    YPlaceCanvas $fid $x $y $w $h  -bg $color
  }
  "YDRAW" {
    #set w $mes3
    #set h $mes4

    YPaintRectFB $fid 0 0 $w $h [WND_color $fid] "black"       

    YWndModmap  $fid.modmap  10 10 [expr $w - 20] [expr $h - 20] "MODMAP_HOME_proc"

    puts "page2_proc: YDRAW"
  }
  
  }

  return
}
#-------------------------------------------------------------------------------
# proc YCanvasScroll {fid x y w h region } {

#   if {! [winfo exists $fid]} {
     
#     YCanvasFrame  $fid  $x $y $w $h  "yellow" 

#     YPlaceCanvas  $fid.can  20 20 100 100 "green" -scrollregion $region

#     #      canvas $fid.can -width $w -height $h \
#       #          -scrollregion $region \
#       #          -xscrollcommand [list $fid.xscroll set] \
#       #          -yscrollcommand [list $fid.yscroll set]
    
#     scrollbar $fid.xscroll -orient horizontal -command [list $fid.can xview]
    
#     scrollbar $fid.yscroll -orient vertical   -command [list $fid.can yview]
    
#     #pack $fid.can     -side   left -fill both -expand true
#     pack $fid.xscroll -side bottom -fill x
#     pack $fid.yscroll -side  right -fill y
     
#   } else {
          
#   }
  
#   #$c.canvas create image 1359 1836 -image sectional -anchor se
#   #$c.canvas create image 40 40 -image gliders -anchor center -tag movable
#   #$c.canvas create image 40 40 -image gliderpair -anchor center -tag  movable

#   #$c.canvas bind movable <Button-1>  {CanvasMark %x %y %W}
#   #$c.canvas bind movable <B1-Motion> {CanvasDrag %x %y %W}
    
# }
#-------------------------------------------------------------------------------     
proc page3_proc {mop from message mes1 mes2 mes3 mes4  args} {
        
        
  metaswitch -- $message  {

  "YCREATE" {
  }

  "*" * {
    set fid [FID $mop]
    puts "****************************************"
  }

  "YOPEN" + {

    set x $mes1
    set y $mes2
    set w $mes3
    set h $mes4
    set color [GET $mop "color"] 

    YPlaceCanvas $fid $x $y $w $h  -bg $color
  }
  "YDRAW" {
    #set w $mes3
    #set h $mes4

    #YPaintRectFB $fid 0 0 $w $h [WND_color $fid] "black"  ;# ??     

    puts "page3_proc: YDRAW"

    #create_scrolled_map  $fid
    
    #ScrolledCanvas ${fid}.c  10 10 { 0 0 1359 1836 }  

    #      canvas $c.canvas -width $width -height $height \
      #          -scrollregion $region \
      #          -xscrollcommand [list $c.xscroll set] \
      #          -yscrollcommand [list $c.yscroll set]
    
    #YCanvasScroll  $fid.c 10 10 200 200 {0 0 50 50}

    #if {0} {

    #  YCanvasFrame   $fid.f        50 50 100 100 "red" 
      
    #  YCanvasProgram $fid.label   170 50 200 200  "cyan" "${::COMPOT}/O/little/little_black"
      #
      # запускается, но не вижу черного квадратика !!?? 
      # а раньше видел! может надо не в канвасе попробовать ??
    #} else {

    set ww [WND_w $fid]
    set hh [WND_h $fid]

    #---------------------------------------------------------
    YCanvasFrame   $fid.f   10 10 [- $ww 20] [- $hh 20] "black" 

    #metabreak
    #return

    set w_reg 500 ;# 1359
    set h_reg 500 ;# 1836
    
    set sc $fid.f.c

    set can [ScrolledCanvas_NEW $sc  [list 0 0 $w_reg $h_reg]] 
    #
    # это фрейм ! ав нем есть канвас $fid.c.canvas !!!!!!!!!!
    #---------------------------------------------------------


    YDrawRectF     $can       100  50 100 100  "red"  ;# рисуем внутри  
    YCanvasFrame   $can.f     250  50 100 100  "blue" ;# создаем новый
    
    #YCanvasProgram $fid.c.canvas.label 250 200 200 200  "cyan" \
      \#                                   "${::COMPOT}/O/little/little_black"
    #}
    
  }
  
  }

  return
}
#-------------------------------------------------------------------------------     
proc page4_proc {mop from message mes1 mes2 mes3 mes4  args} {
                       
  
  metaswitch -- $message  {

  "YCREATE" {
  }
    
  "*" * {
    set fid [FID $mop]
    #puts "***********************************"
  }

  "YOPEN" + {

    set x $mes1
    set y $mes2
    set w $mes3
    set h $mes4
    set color [GET $mop "color"] 

    YPlaceCanvas $fid $x $y $w $h  -bg $color

    set plot [plot_test3_prepare_NEW]
      
    WIN_set $fid "plot"  $plot
    WIN_set $fid "ti"    0 ;# $ti

  #}
  #"YDRAW" {
    #set w $mes3
    #set h $mes4

    YPaintRectFB $fid 0 0 $w $h [WND_color $fid] "red"       

    puts "page2_proc: YDRAW"

    set x0  10
    set y0  10
    set w0  [- $w 20]
    set h0  [- $h 20]

    set plot [WIN_get $fid "plot"]
    set ti  0

    YWnd $fid.plot "PLOT" "BigWindow"  $x0 $y0 $w0 $h0   \
      0 0 0 [list $plot $ti] -color "grey"
  }
  
  }

  #   RETURN_TRUE;
  return
}
# /*------------------------------testmsg_proc----------------------------------*/
proc testmsg_proc  {mop from message  mes1 mes2 mes3 mes4  args} {    
           

  metaswitch -glob -- $message  {

  "YCREATE" {
  }

  "*" * {
    set fid [FID $mop]
    #puts "****************************************"
  }

  "YOPEN" + {

    set x $mes1
    set y $mes2
    set w $mes3
    set h $mes4
    set color [GET $mop "color"] 

    YPlaceCanvas $fid $x $y $w $h  -bg $color

  }
  "YDRAW" {
    # если вызывается отдельно, то нужны координаты?

    #set x $mes1
    #set y $mes2
    set w [WND_w $fid] ;# $mes3
    set h [WND_h $fid] ;# $mes4
    
    #set win $::WINS($fid)

    #$win.w = $w
    #$win.h = $h

    
    #puts "push_proc: YDRAW: x= $x y= $y w= $w h= $h"
    #puts "x0 = $::KERN(x0)"
    #puts "y0 = $::KERN(y0)"
    
    #YDrawRectB  $fid 0 0 $w $h "red"  ;# ??
    #YDrawRectFB  $fid 10 20 30 40 "red" "blue"  ;# ??

    YDrawRectF  $fid 0 0 $w $h "white" 
    #YDrawRectF  $fid 10 10 10 10 "white" 
    #$fid create rect 10 10 20 20 -fill "white"
       
    set name [WND_name $fid]
    # puts "testmsg_proc: YDRAW: name = $name"
  
    draw_rect_text $fid  $name 0 0 $w $h "black"
  }
  
  "*MOUSE*" {
    set x $mes1
    set y $mes2 ;# ??
    #set w $mes3
    #set h $mes4

    #sprintf (str, "LMOUSEDOWN:   %d  %d", mes1, mes2); 
    set str [format "%20s  %d %d" $message $x $y]

    puts "str = $str  x= $x y= $y" ; # ::DICT

    WND_name_set  $fid $str

    #YDrawRectF  $fid 0 0 $w $h "white" 
    #draw_rect_text $fid $str 0 0 [WND_w $fid] [WND_h $fid] "black"

    YGoto "YDRAW" 0 0 [WND_w $fid] [WND_h $fid]
  }

  }

  return
}                                                                               
# /*----------------------------------------------------------------------*/

# #endif
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
proc push_proc {mop from message mes1 mes2 mes3 mes4  args} {

  puts "push_proc:  mop= $mop from= $from message= $message"

  metaswitch -glob -- $message  {

  "YCREATE" {
  }

  "*" * {
    set fid [FID $mop]
    puts "****************************************"
  }

  "YOPEN" + {
    set x $mes1
    set y $mes2
    set w $mes3
    set h $mes4
    set color [GET $mop "color"] 

    YPlaceCanvas $fid $x $y $w $h  -bg $color
  }
  "YDRAW" {
    set x $mes1
    set y $mes2
    set w $mes3
    set h $mes4
    
    #puts "push_proc: YDRAW"
    
    #YDrawRectB  $fid 0 0 $w $h "black" 
    YPaintRectFB  $fid 0 0 $w $h  [WND_color $fid] "black" 
          
    draw_rect_text $fid [WND_name $fid] 0 0 $w $h "black"
  }
  
  "YLMOUSEUP" {

    puts " push_proc (YLMOUSEUP): parent=  [WND_parent $fid]"

    YPost [WND_parent $fid] "MYPUSH_UP" $fid 0 0 0
    #puts "YLMOUSEUP !!!"
  }

  }
  
  #   RETURN_TRUE;
}
#-----------------------------------------------------------------main_proc-----

# глобальная - это не правильно, нужно внутрь окна
# 
set ::curpage "page1"

#-----------------------------------------------------------------main_proc-----
proc main_proc {mop from message mes1 mes2 mes3 mes4  args} {

    
  metaswitch -- $message {

  "YCREATE" {
  }

  "*" * {
    set fid [FID $mop]
    #puts "****************************************"
  }

  "YOPEN_RESIZE" -
  "YOPEN"   + {
    set x $mes1
    set y $mes2
    set w $mes3
    set h $mes4
    set color [GET $mop "color"] 

    YPlaceCanvas $fid $x $y $w $h  -bg "red" ;#$color ;# создать и перерисовать
  }
  "YDRAW" {
    #set w $mes3
    #set h $mes4
    
    YPaintRectF  $fid  0 0  $w $h  [WND_color $fid]        
    
    begin_group $fid "MESSAGES"            20 375 440 55 "darkgrey" ;# "black"
    YWnd        $fid.test testmsg_proc ""  15 15  385 30  0 0 0 0 -color "white" 
    end_group 
    

    YGoto "YDRAWITEM" 0 0 0 "1"
    #YGoto "YDRAWITEM" 0 0 "fuchsia" "page1_proc"

    # рисуем кнопочки

    YWnd $fid.push1 push_proc "Page1"  465  20  65 40  0 0 0 0  -color "magenta"
    YWnd $fid.push2 push_proc "Page2"  465  70  65 40  0 0 0 0  -color "white"
    YWnd $fid.push3 push_proc "Page3"  465 120  65 40  0 0 0 0  -color "blue"
    YWnd $fid.push4 push_proc "Page4"  465 170  65 40  0 0 0 0  -color "red"

    YWnd $fid.exit  push_proc "Exit" 465 380  65 40  0 0 0 0 -color "green" ;# lime -> green
    
  }
  
  "YDRAWITEM" {
    #puts "YDRAWITEM ............"

    set i $mes4

    set color [lindex {"" "magenta" "white" "blue" "red"} $i]

    set ::curpage "page${i}"

    # почему не сохраняются верхние канвасы?
    # 
    # 
    YWnd  $fid.page${i} "page${i}_proc" "" 20 20  440 340  0  0 0 0  -color $color
  }

  "MYPUSH_UP" {

    if       {$mes1 == "$fid.exit"} {
      exit

    } elseif {$mes1 == "$fid.push1"} {YGoto "YDRAWITEM" 0 0 0 "1" \
    } elseif {$mes1 == "$fid.push2"} {YGoto "YDRAWITEM" 0 0 0 "2" \
    } elseif {$mes1 == "$fid.push3"} {YGoto "YDRAWITEM" 0 0 0 "3" \
    } elseif {$mes1 == "$fid.push4"} {YGoto "YDRAWITEM" 0 0 0 "4" \
    }
    
  }
  
  "*MOUSE*" {

    set x $mes1
    set y $mes2
    YSend $fid.test $message $mes1 $mes2 $mes3 $mes4 
  }

  default {
    puts "ERROR message^ $message"
  }
    
  }
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

  return
}
#-------------------------------------------------------------------------------
proc MAIN {} {

  global argc argv
 

  set x0  430
  set y0  280

  set w0  550
  set h0  450


  YBigWindowNew . "main" "main_proc"  $x0 $y0  $w0 $h0 -title "TEST for COMPOT GUI"  \
                                                       -color "yellow"

  return
}
#-------------------------------------------------------------------------------


MAIN

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# /*******************************************************************************/

