; -*-   mode: lisp ; coding: koi8   -*- ----------------------------------------

;-------------------------------------------------------------------------------
;-------------------------------------------------------------------------------

(require 'asdf)

;-------------------------------------------------------------------------------
; README:

; This is implementation of Conway's Game of Life that uses power of Lisp and 
; OpenGl.
; If you don't know what Game of Life is, please refer to wikipedia 
; ( http://en.wikipedia.org/wiki/Conway's_Game_of_Life )

; To launch it simply use following command 

; sbcl-run run-gl.lisp

; or enter lisp interpreter and load "run-gl.lisp" file 

; This program is tested only with sbcl lisp implementation. 
; You need to install additional libraries to make program work. 
; Just try to execute program and you'll see what are missing ;)

; Shortcuts 

; <Up> or <w>     - move up
; <Down> or <s>   - move down
; <Left> or <a>   - move left
; <Right> or <d>  - move right
; <Space>         - toggle pause
; <Return>        - make cell live or dead
; <f>             - toggle fixed coord grid

; <t>             - add empty row to the top side of the grid
; <b>             - add empty row to the bottom side of the grid
; <l>             - add empty row to the left side of the grid
; <r>             - add empty row to the right side of the grid

; <T>             - remove row from the top side of the grid
; <B>             - remove row from the bottom side of the grid
; <L>             - remove row from the left side of the grid
; <R>             - remove row from the right side of the grid

; <c>             - clear all cells (make them dead)
; <n>             - force new generation (especially useful when paused)

; <+>             - increase automatic generations speed
; <->             - decrease automatic generations speed

; <g>             - make glider

;-------------------------------------------------------------------------------

(defpackage #:gol-asd
  (:use :cl :asdf)
  )

(in-package :gol-asd)

;----------------------------------------

(defsystem :gol
           :default-component-class cl-source-file.cl ; файлы идут с *.cl
           :defsystem-depends-on    (:asdf-encodings) ; 

           :description "Conway's Game of life backend implementation"
           :components 
           ;((:file "o-libs"))
           ((:file "t-3d00"))
           )

(defsystem :gol-gl-frontend
           :default-component-class cl-source-file.cl ; файлы идут с *.cl
           :defsystem-depends-on    (:asdf-encodings) ; 

           :depends-on (:cl-opengl :cl-glu :cl-glut :gol)
           :description "Conway's Game of life opengl frontend"
           :components 
           ;((:file "o-main"))
           ((:file "t-3d01"))
           )

(defsystem :gol-tests
           :default-component-class cl-source-file.cl ; файлы идут с *.cl
           :defsystem-depends-on    (:asdf-encodings) ; 

           :depends-on (:lift :f-underscore :gol :metatilities)

           :components 
           ((:file "t-3d02"))

           ;;:perform (test-op :after (op c)

           ;:in-order-to ((asdf:test-op (asdf:test-op :cl-digraph.test)))

           :perform (test-op (op c)

                             (FORMAT T "!!!!!!!!!!!!!!!!!! ~%")
                             (uiop:symbol-call :gol-tests '#:test-gol)
                             (FORMAT T "!!!!!!!!!!!!!!!!!! ~%")
                             )
           )

;-------------------------------------------------------------------------------


(require :gol-gl-frontend)

(gol-gl-frontend:run)

;----------------------------------------
(defun TEST ()

  (asdf:load-system :gol-tests)
  
  (format t "~%............. ~%~%")

  (uiop:symbol-call :gol-tests '#:test-gol)

  (asdf:test-system :gol-tests)
  
  
  (format t "~%~%")

)
;-------------------------------------------------------------------------------

(TEST)

;-------------------------------------------------------------------------------
;(cl:eval-when (:load-toplevel :execute)
;  (asdf:load-system :fiveam)
;  (asdf:load-system :checkl))

;  (defmethod perform ((o deliver-asd-op) (s system))
;    (let* ((inputs (input-files o s))
;           (fasl (first inputs))
;           (library (second inputs))

;  :perform (test-op (o s)
;                    (asdf:load-system :drakma-test)
;                    (asdf:perform 'asdf:test-op :drakma-test)))

;-------------------------------------------------------------------------------
;-------------------------------------------------------------------------------

