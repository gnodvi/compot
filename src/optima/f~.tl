# -*-   mode: tcl  ; coding: koi8   -*- ----------------------------------------

#!/bin/sh
# \
exec tclsh "$0" ${1+"$@"}
#
#-------------------------------------------------------------------------------

set auto_path [linsert $auto_path 0 "./COMPOT"]

package require compot::common 

package require tcltest

# ;===============================================================================
# ;
# ;
# ;===============================================================================

# (defvar CUR_DIR "f")


# ;(load "I/a-comm.cl")
# (load "EXT/LSP/src/a-comm.cl")

# ;-------------------------------------------------------------------------------
# (defun SORT-TEST (argus)

#   (my_load "f-sort.cl" CUR_DIR) (use-package :a_sort)

#   (run_cdr_argus (first argus) argus "SORT ..")
# )
# ;-------------------------------------------------------------------------------
# ;===============================================================================


# ;(READ_AND_CALL_ARGUS  CUR_DIR)

# ; ==============================================================================
# ; TODO: 

# ; - рождение сортировок, поиск оптимальных параметров уже заданных алгоритмов;

# ;===============================================================================
# ;
# ;
# ;===============================================================================

# ;(defvar CUR_DIR "g")


# ;;(load "../a-comm.cl")
# ;;(load "./a-comm.cl")
# ;(load "../common/a-comm.cl")

# ;-------------------------------------------------------------------------------
# ;(defun SORT-TEST (argus)

# ;  (my_load "f-sort.cl" CUR_DIR) (use-package :a_sort)

# ;  (run_cdr_argus (first argus) argus "SORT ..")
# ;)
# ;-------------------------------------------------------------------------------
# (defun SORT-TABS (argus)

#   (my_load "f-sort.cl" CUR_DIR) (use-package :a_sort)
#   (my_load "f-tabs.cl" CUR_DIR) (use-package :a-ctab)

#   (load "f_test.li")

#   (run_cdr_argus (first argus) argus "TEST ..")

# )
# ;-------------------------------------------------------------------------------
# ;-------------------------------------------------------------------------------
# (defun TOUR (argus)

#   (my_load "f-tabs.cl" CUR_DIR) (use-package :a-ctab)

#   (load "f-tour.cl")
#   (run_cdr_argus (first argus) argus "TEST ..")

# )
# ;===============================================================================


# (READ_AND_CALL_ARGUS  CUR_DIR)

# ; ==============================================================================
# ; TODO: 

# ; - объeктная сорeвноватeльная систeма (стeнка на стeнку);
# ; - список популяции тожe сдeлать частью систeмы ТАБ-ТУР;
# ; - 
# ; - сорeвнованиe сортировок (болee тонкая настройка парамeтров и типов данных);
# ; - рождение сортировок, поиск оптимальных параметров уже заданных алгоритмов;

# ;===============================================================================

#-------------------------------------------------------------------------------
proc TEST {} {

  source "g-corA.tl"
  source "g-corB.tl"  ;#

  global argc argv

  incr ::ind0

  eval [lindex $argv 1] ;# вызываем вспомогательную секонд-функцию

}
#-------------------------------------------------------------------------------
# proc COMM {} {

#   source "f-item.tl" 
#   source "t-proG.tl" 
  
#   global argc argv

#   incr ::ind0

#   eval [lindex $argv 1] ;# вызываем вспомогательную секонд-функцию

# }
#-------------------------------------------------------------------------------
#namespace import tcltest::*

# f~.tl COMM FS 2013 10 6 10

#
#-------------------------------------------------------------------------------

set CUR_DIR "f"
  
READ_AND_CALL_ARGUS  $CUR_DIR

puts "" 

#-------------------------------------------------------------------------------
#
#-------------------------------------------------------------------------------
