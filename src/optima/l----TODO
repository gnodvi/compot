# -*-   mode: tcl  coding: koi8   -*- ------------------------------------------

;# //******************************************************************************
;
; TODO:


0) рефакторинг в пространстве g~.tl и t~.tl:

   - вызовы основных функций поиска решений должны быть: .... {task solv ..}
   - в task дожны быть fitness_proc + len_chromosome + доп.параметры по конкретной
     задаче (например, ::target_text).
   - а нужно ли в task занести seed_proc, а также, например, ::gp_list ???
   - подключить для сравнительного тестирования в maintest - bot3, т.е.
     процедуры gp_evolution, интегрировав их с GAUL.

- сделать нового бота bot4 - с ввыделением библиотеки подстрок и сравнить,
     ерзультат должен быть лучше, особенно при обучении !!!!
   - затем тоже самое сравнить для простой задач GP - поиск простеньких программ
     сложения и вычмтания !!

-----------------------------------------------------------------------------------

1) Рефакт. h-gslm и объеденить с h-mbee

   h-gslm.tl
   h-gslm.tl N  - с указательным списком

   h-gslm.tl  parabolic fr 100 
   h-gslm.tl  parabolic fr 100   N

2) Рефакт. g~.tl и объеденить с h~.tl (вместе с градиентным спуском)

   g_stru.tl FS 20 20

   set ::is_print 1 ;# слишком много печати, надо более гибко

   - упростить тесты ?; 
   - сравнить их     ?;

   - перейти на DICT (пеервести record -> dictrecord с типажами);
   - пеерйти на списки итемов (вместо строк);
   - добавить библиотечную структуру;

   - в дальнейшем сюда перенести genpro с добавкой GRAF+NEAT !!!!!!
   - 

-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------

3) f-item.tl + f-proG.tl + g~.tl + h~.tl


-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------

1) "h" -> "b" ??

2) h_stru.tl _1  2 5 2 
 
   - наверное более правильно вместо чисто строк использовать в обшем виде списки
     в т.ч. списки из целых, поэтому сначала найти похожий тест (для целых);

   - можно попробовать использовать макрораскрытие (аналог вызова функций в JOY), 
     т.е. уменьшаем пространство поиска и вносим зачатки интеллекта в виде библиотеки 
     и макросов;
  

3) но наиболее перспективным представляется использовани на месте генов - отдельные
   подпрограммки - эволюционирующие и взаимодействующие, либо посредством
   общих библиотек и констант, либо напрямую, "разговаривая" сообщениями.
   [т.е. двигаем не GA -> GP,  а EP (эволюционное программирование) -> GA]

-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------

; cl h_test.cl  ga  2  1
; cl h_test.cl  ga  2  1  @ | more
;    h_test.tl  ga  2  1  @ | more
; cl h_test.cl  ga 20 10   (дело было в егноциде, надо уменьшать fill-pointer !!)


cl h_all5.cl _1  11 10 10
   h_all5.tl _1  11 10 10

-----------------------------------------------------------------------------------

# + тестовые расчеты по минимумам сложных функций;
# + адаптивный "полный перебор" и "случайно-спусковой" алгоритмы;
# + использовать для поиска минимумов библиотеку GAUL-S;

# + MultiFor для множественного использования (структура);

# - комбинирвать разные методы (после GA или DE сделать спуск);
# - повторять поиск на разных популяциях, набирая статистику до нужного решения;
# - перенести сюда все примеры из gaul-t и делать рефакторинг самой GAUL;
# - все-равно без адаптивных-связанных веток алгоримов - смысла НЕТ;

-----------------------------------------------------------------------------------

