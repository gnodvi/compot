# -*-   mode: text ; coding: koi8   -*- ----------------------------------------

#-------------------------------------------------------------------------------

- добавит псевдо-спектральный (или аналогичный) метод, т.е. разложение искомой
  функции в виде комбинации более простых (описываемых несколькими переменными).
  т.е. понижается сильно размерность искомого вектора; найденное решение можно
  использовать как начальное для других методов поиска и наоборот !!

- добавить решения в символьном виде - матричные преобразованиия и т.д.;
 
- конечная цель: комплексная методика поиска решений функционально-алгоритмических
  задач (систем уравнений); в ходе поиска формируетсмя адаптационная библиотека
  для частных решений (ее типы и методы могут служить подсказкой для альтернативной
  интерпретации искомой проблемы!!).
  при соединении адапт. библиотек различных областей, также будут формироваться
  общие типы, что и является конечной целью построения Единой теории...


#-------------------------------------------------------------------------------

 - переделать в системе MINPROC именование макросов (или структуры) в более 
   универсальное, увеличить скорость тестов (сам спуск отрабатывает очень 
   быстро, дело видимо в структурах MINPROC):
 
    cl n~.cl MINF speed_test
       n~.tl MINF speed_test


#-------------------------------------------------------------------------------
# TODO GENALG
#-------------------------------------------------------------------------------

-) Рефакторинг кода: 
   
   - уменьшить POPULATION_T (выделить вспомогательные структуры);
   - классы алгоритмов (алгоритмы + структуры) - в отдельную сущность;
   - /tclib/modules/simulation/random.tcl;
   - выделение f-pops.tl;

-) Добавить возможность макрораскрытия генома. 
   
   - т.е. определять блоки (прообраз функций) в библиотеки;
   - отслеживать постоянство длины генома при макропреобразованиях;
   - с другой стороны сделать тесты с переменной длиной, например - задача найти 
     вариант наилучшего сжатия последовательности символов;

-) Тесты сделать как отработку "ботов" (конкретизированные алгоритмы) на "датах"
   (конкрет-ные "классы" заданий), а также возможность их сравнивать как таблицу
   соревнований;

   - из старой библ-ки взять систему соревнований и турниров;
   - добавить градиентный спуск сделать его частным случаем дифф. эволюции;
   - добавить пчелиный поиск;
   - добавить из /tclib/modules/simulation/annealing.tcl;
   - сравнительные тесты по разным фитнес-функциям, как сложно-дискретными, так 
     и дифф.непрерывными

-) Распараллелить на потоках:

   - TCL: --enable-pthread ?;
   - можно попробовать раскидывать задания через UDP между компами;

-) Визуализация (статическая и/или динамическая):

   - использовать GnuPlot;
   - сделать свою рисовалку с динамической демонстрацией (эволюции);

-) Сравнение различных алгоритмов (статья на LaTex):

   - упор на гибкость, настраиваемость, интеграцию моделей;
   - таблица сравнений с DE;

#-------------------------------------------------------------------------------
#

exit

#-------------------------------------------------------------------------------
#
#-------------------------------------------------------------------------------
_LINES () 
{

echo ""
echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
echo ""

}
#-------------------------------------------------------------------------------
run_test_gslm () 
{

 cmd="cl m-gslm.li $1 $2 $3"

 echo $cmd
 $cmd

 _LINES  

 cmd="m-gslm.tl $1 $2 $3"

 echo $cmd
 $cmd

 #_LINES 

}
#-------------------------------------------------------------------------------
run_test () 
{

 #cmd="cl n~.cl BEES bees_test @"
 #cmd="cl n~.cl BEES random_test_new"
 cmd="cl n~.cl MINF simp_test"

 echo $cmd
 $cmd

 _LINES  

 #cmd="n~.tl BEES bees_test"
 #cmd="n~.tl BEES random_test_new"
 cmd="n~.tl MINF simp_test"

 echo $cmd
 echo ""

 $cmd

 #_LINES 

}
#-------------------------------------------------------------------------------

#echo ""

#run_test_gslm 
#run_test_gslm parabolic  fr   100 
#run_test_gslm rosenbrock fr   100 
#run_test_gslm parabolic  pr   100  
#run_test_gslm rosenbrock pr   100  
#run_test_gslm parabolic  bfgs 100 
#run_test_gslm rosenbrock bfgs 100  
#run_test_gslm parabolic  step 100 

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

# cl n~.cl MINF more_test -1 
# cl n~.cl MINF simp_test  
# cl n~.cl BEES bees_test  

#n~.tl BEES bees_test

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
